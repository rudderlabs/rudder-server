// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rudderlabs/rudder-server/processor/transformer (interfaces: TrackingPlanClient)
//
// Generated by this command:
//
//	mockgen -destination=../../mocks/processor/transformer/mock_tracking_plan_client.go -package=mocks_transformer github.com/rudderlabs/rudder-server/processor/transformer TrackingPlanClient
//

// Package mocks_transformer is a generated GoMock package.
package mocks_transformer

import (
	context "context"
	reflect "reflect"

	types "github.com/rudderlabs/rudder-server/processor/types"
	gomock "go.uber.org/mock/gomock"
)

// MockTrackingPlanClient is a mock of TrackingPlanClient interface.
type MockTrackingPlanClient struct {
	ctrl     *gomock.Controller
	recorder *MockTrackingPlanClientMockRecorder
	isgomock struct{}
}

// MockTrackingPlanClientMockRecorder is the mock recorder for MockTrackingPlanClient.
type MockTrackingPlanClientMockRecorder struct {
	mock *MockTrackingPlanClient
}

// NewMockTrackingPlanClient creates a new mock instance.
func NewMockTrackingPlanClient(ctrl *gomock.Controller) *MockTrackingPlanClient {
	mock := &MockTrackingPlanClient{ctrl: ctrl}
	mock.recorder = &MockTrackingPlanClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTrackingPlanClient) EXPECT() *MockTrackingPlanClientMockRecorder {
	return m.recorder
}

// Validate mocks base method.
func (m *MockTrackingPlanClient) Validate(ctx context.Context, events []types.TransformerEvent) types.Response {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", ctx, events)
	ret0, _ := ret[0].(types.Response)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockTrackingPlanClientMockRecorder) Validate(ctx, events any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockTrackingPlanClient)(nil).Validate), ctx, events)
}
