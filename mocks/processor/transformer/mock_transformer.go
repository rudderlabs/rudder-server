// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rudderlabs/rudder-server/processor/transformer (interfaces: Transformer)
//
// Generated by this command:
//
//	mockgen -destination=../../mocks/processor/transformer/mock_transformer.go -package=mocks_transformer github.com/rudderlabs/rudder-server/processor/transformer Transformer
//

// Package mocks_transformer is a generated GoMock package.
package mocks_transformer

import (
	context "context"
	reflect "reflect"

	transformer "github.com/rudderlabs/rudder-server/processor/transformer"
	gomock "go.uber.org/mock/gomock"
)

// MockTransformer is a mock of Transformer interface.
type MockTransformer struct {
	ctrl     *gomock.Controller
	recorder *MockTransformerMockRecorder
	isgomock struct{}
}

// MockTransformerMockRecorder is the mock recorder for MockTransformer.
type MockTransformerMockRecorder struct {
	mock *MockTransformer
}

// NewMockTransformer creates a new mock instance.
func NewMockTransformer(ctrl *gomock.Controller) *MockTransformer {
	mock := &MockTransformer{ctrl: ctrl}
	mock.recorder = &MockTransformerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransformer) EXPECT() *MockTransformerMockRecorder {
	return m.recorder
}

// Transform mocks base method.
func (m *MockTransformer) Transform(ctx context.Context, clientEvents []transformer.TransformerEvent, batchSize int) transformer.Response {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transform", ctx, clientEvents, batchSize)
	ret0, _ := ret[0].(transformer.Response)
	return ret0
}

// Transform indicates an expected call of Transform.
func (mr *MockTransformerMockRecorder) Transform(ctx, clientEvents, batchSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transform", reflect.TypeOf((*MockTransformer)(nil).Transform), ctx, clientEvents, batchSize)
}

// UserTransform mocks base method.
func (m *MockTransformer) UserTransform(ctx context.Context, clientEvents []transformer.TransformerEvent, batchSize int) transformer.Response {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserTransform", ctx, clientEvents, batchSize)
	ret0, _ := ret[0].(transformer.Response)
	return ret0
}

// UserTransform indicates an expected call of UserTransform.
func (mr *MockTransformerMockRecorder) UserTransform(ctx, clientEvents, batchSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserTransform", reflect.TypeOf((*MockTransformer)(nil).UserTransform), ctx, clientEvents, batchSize)
}

// Validate mocks base method.
func (m *MockTransformer) Validate(ctx context.Context, clientEvents []transformer.TransformerEvent, batchSize int) transformer.Response {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", ctx, clientEvents, batchSize)
	ret0, _ := ret[0].(transformer.Response)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockTransformerMockRecorder) Validate(ctx, clientEvents, batchSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockTransformer)(nil).Validate), ctx, clientEvents, batchSize)
}
