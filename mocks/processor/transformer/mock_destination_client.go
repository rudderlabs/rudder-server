// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rudderlabs/rudder-server/processor/transformer (interfaces: DestinationClient)
//
// Generated by this command:
//
//	mockgen -destination=../../mocks/processor/transformer/mock_destination_client.go -package=mocks_transformer github.com/rudderlabs/rudder-server/processor/transformer DestinationClient
//

// Package mocks_transformer is a generated GoMock package.
package mocks_transformer

import (
	context "context"
	reflect "reflect"

	types "github.com/rudderlabs/rudder-server/processor/types"
	gomock "go.uber.org/mock/gomock"
)

// MockDestinationClient is a mock of DestinationClient interface.
type MockDestinationClient struct {
	ctrl     *gomock.Controller
	recorder *MockDestinationClientMockRecorder
	isgomock struct{}
}

// MockDestinationClientMockRecorder is the mock recorder for MockDestinationClient.
type MockDestinationClientMockRecorder struct {
	mock *MockDestinationClient
}

// NewMockDestinationClient creates a new mock instance.
func NewMockDestinationClient(ctrl *gomock.Controller) *MockDestinationClient {
	mock := &MockDestinationClient{ctrl: ctrl}
	mock.recorder = &MockDestinationClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDestinationClient) EXPECT() *MockDestinationClientMockRecorder {
	return m.recorder
}

// Transform mocks base method.
func (m *MockDestinationClient) Transform(ctx context.Context, events []types.TransformerEvent) types.Response {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transform", ctx, events)
	ret0, _ := ret[0].(types.Response)
	return ret0
}

// Transform indicates an expected call of Transform.
func (mr *MockDestinationClientMockRecorder) Transform(ctx, events any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transform", reflect.TypeOf((*MockDestinationClient)(nil).Transform), ctx, events)
}
