// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rudderlabs/rudder-server/processor/transformer (interfaces: ServiceClient)
//
// Generated by this command:
//
//	mockgen -destination=./../../mocks/processor/mock_transformer_manager.go -package=mock_transformer github.com/rudderlabs/rudder-server/processor/transformer ServiceClient
//

// Package mock_transformer is a generated GoMock package.
package mock_transformer

import (
	context "context"
	reflect "reflect"

	types "github.com/rudderlabs/rudder-server/processor/types"
	gomock "go.uber.org/mock/gomock"
)

// MockServiceClient is a mock of ServiceClient interface.
type MockServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockServiceClientMockRecorder
	isgomock struct{}
}

// MockServiceClientMockRecorder is the mock recorder for MockServiceClient.
type MockServiceClientMockRecorder struct {
	mock *MockServiceClient
}

// NewMockServiceClient creates a new mock instance.
func NewMockServiceClient(ctrl *gomock.Controller) *MockServiceClient {
	mock := &MockServiceClient{ctrl: ctrl}
	mock.recorder = &MockServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceClient) EXPECT() *MockServiceClientMockRecorder {
	return m.recorder
}

// SendRequest mocks base method.
func (m *MockServiceClient) SendRequest(ctx context.Context, clientEvents []types.TransformerEvent, batchSize int) types.Response {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendRequest", ctx, clientEvents, batchSize)
	ret0, _ := ret[0].(types.Response)
	return ret0
}

// SendRequest indicates an expected call of SendRequest.
func (mr *MockServiceClientMockRecorder) SendRequest(ctx, clientEvents, batchSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendRequest", reflect.TypeOf((*MockServiceClient)(nil).SendRequest), ctx, clientEvents, batchSize)
}
