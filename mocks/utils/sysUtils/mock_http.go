// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rudderlabs/rudder-server/utils/sysUtils (interfaces: HttpI)
//
// Generated by this command:
//
//	mockgen -destination=../../mocks/utils/sysUtils/mock_http.go -package mock_sysUtils github.com/rudderlabs/rudder-server/utils/sysUtils HttpI
//

// Package mock_sysUtils is a generated GoMock package.
package mock_sysUtils

import (
	context "context"
	io "io"
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockHttpI is a mock of HttpI interface.
type MockHttpI struct {
	ctrl     *gomock.Controller
	recorder *MockHttpIMockRecorder
	isgomock struct{}
}

// MockHttpIMockRecorder is the mock recorder for MockHttpI.
type MockHttpIMockRecorder struct {
	mock *MockHttpI
}

// NewMockHttpI creates a new mock instance.
func NewMockHttpI(ctrl *gomock.Controller) *MockHttpI {
	mock := &MockHttpI{ctrl: ctrl}
	mock.recorder = &MockHttpIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHttpI) EXPECT() *MockHttpIMockRecorder {
	return m.recorder
}

// NewRequest mocks base method.
func (m *MockHttpI) NewRequest(method, url string, body io.Reader) (*http.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewRequest", method, url, body)
	ret0, _ := ret[0].(*http.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewRequest indicates an expected call of NewRequest.
func (mr *MockHttpIMockRecorder) NewRequest(method, url, body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewRequest", reflect.TypeOf((*MockHttpI)(nil).NewRequest), method, url, body)
}

// NewRequestWithContext mocks base method.
func (m *MockHttpI) NewRequestWithContext(ctx context.Context, method, url string, body io.Reader) (*http.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewRequestWithContext", ctx, method, url, body)
	ret0, _ := ret[0].(*http.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewRequestWithContext indicates an expected call of NewRequestWithContext.
func (mr *MockHttpIMockRecorder) NewRequestWithContext(ctx, method, url, body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewRequestWithContext", reflect.TypeOf((*MockHttpI)(nil).NewRequestWithContext), ctx, method, url, body)
}
