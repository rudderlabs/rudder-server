// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rudderlabs/rudder-server/utils (interfaces: EventBusI)

// Package utils is a generated GoMock package.
package utils

import (
	gomock "github.com/golang/mock/gomock"
	utils "github.com/rudderlabs/rudder-server/utils"
	reflect "reflect"
)

// MockEventBusI is a mock of EventBusI interface
type MockEventBusI struct {
	ctrl     *gomock.Controller
	recorder *MockEventBusIMockRecorder
}

// MockEventBusIMockRecorder is the mock recorder for MockEventBusI
type MockEventBusIMockRecorder struct {
	mock *MockEventBusI
}

// NewMockEventBusI creates a new mock instance
func NewMockEventBusI(ctrl *gomock.Controller) *MockEventBusI {
	mock := &MockEventBusI{ctrl: ctrl}
	mock.recorder = &MockEventBusIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEventBusI) EXPECT() *MockEventBusIMockRecorder {
	return m.recorder
}

// Publish mocks base method
func (m *MockEventBusI) Publish(arg0 string, arg1 interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Publish", arg0, arg1)
}

// Publish indicates an expected call of Publish
func (mr *MockEventBusIMockRecorder) Publish(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockEventBusI)(nil).Publish), arg0, arg1)
}

// PublishToChannel mocks base method
func (m *MockEventBusI) PublishToChannel(arg0 utils.DataChannel, arg1 string, arg2 interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PublishToChannel", arg0, arg1, arg2)
}

// PublishToChannel indicates an expected call of PublishToChannel
func (mr *MockEventBusIMockRecorder) PublishToChannel(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishToChannel", reflect.TypeOf((*MockEventBusI)(nil).PublishToChannel), arg0, arg1, arg2)
}

// Subscribe mocks base method
func (m *MockEventBusI) Subscribe(arg0 string, arg1 utils.DataChannel) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Subscribe", arg0, arg1)
}

// Subscribe indicates an expected call of Subscribe
func (mr *MockEventBusIMockRecorder) Subscribe(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockEventBusI)(nil).Subscribe), arg0, arg1)
}
