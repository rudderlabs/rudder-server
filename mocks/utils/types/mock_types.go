// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rudderlabs/rudder-server/utils/types (interfaces: UserSuppression,ReportingI)

// Package mock_types is a generated GoMock package.
package mock_types

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/rudderlabs/rudder-server/utils/types"
)

// MockUserSuppression is a mock of UserSuppression interface.
type MockUserSuppression struct {
	ctrl     *gomock.Controller
	recorder *MockUserSuppressionMockRecorder
}

// MockUserSuppressionMockRecorder is the mock recorder for MockUserSuppression.
type MockUserSuppressionMockRecorder struct {
	mock *MockUserSuppression
}

// NewMockUserSuppression creates a new mock instance.
func NewMockUserSuppression(ctrl *gomock.Controller) *MockUserSuppression {
	mock := &MockUserSuppression{ctrl: ctrl}
	mock.recorder = &MockUserSuppressionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserSuppression) EXPECT() *MockUserSuppressionMockRecorder {
	return m.recorder
}

// IsSuppressedUser mocks base method.
func (m *MockUserSuppression) IsSuppressedUser(arg0, arg1, arg2 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSuppressedUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsSuppressedUser indicates an expected call of IsSuppressedUser.
func (mr *MockUserSuppressionMockRecorder) IsSuppressedUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSuppressedUser", reflect.TypeOf((*MockUserSuppression)(nil).IsSuppressedUser), arg0, arg1, arg2)
}

// MockReportingI is a mock of ReportingI interface.
type MockReportingI struct {
	ctrl     *gomock.Controller
	recorder *MockReportingIMockRecorder
}

// MockReportingIMockRecorder is the mock recorder for MockReportingI.
type MockReportingIMockRecorder struct {
	mock *MockReportingI
}

// NewMockReportingI creates a new mock instance.
func NewMockReportingI(ctrl *gomock.Controller) *MockReportingI {
	mock := &MockReportingI{ctrl: ctrl}
	mock.recorder = &MockReportingIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReportingI) EXPECT() *MockReportingIMockRecorder {
	return m.recorder
}

// AddClient mocks base method.
func (m *MockReportingI) AddClient(arg0 context.Context, arg1 types.Config) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddClient", arg0, arg1)
}

// AddClient indicates an expected call of AddClient.
func (mr *MockReportingIMockRecorder) AddClient(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddClient", reflect.TypeOf((*MockReportingI)(nil).AddClient), arg0, arg1)
}

// IsPIIReportingDisabled mocks base method.
func (m *MockReportingI) IsPIIReportingDisabled(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPIIReportingDisabled", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsPIIReportingDisabled indicates an expected call of IsPIIReportingDisabled.
func (mr *MockReportingIMockRecorder) IsPIIReportingDisabled(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPIIReportingDisabled", reflect.TypeOf((*MockReportingI)(nil).IsPIIReportingDisabled), arg0)
}

// Report mocks base method.
func (m *MockReportingI) Report(arg0 []*types.PUReportedMetric, arg1 *sql.Tx) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Report", arg0, arg1)
}

// Report indicates an expected call of Report.
func (mr *MockReportingIMockRecorder) Report(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Report", reflect.TypeOf((*MockReportingI)(nil).Report), arg0, arg1)
}

// WaitForSetup mocks base method.
func (m *MockReportingI) WaitForSetup(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForSetup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitForSetup indicates an expected call of WaitForSetup.
func (mr *MockReportingIMockRecorder) WaitForSetup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForSetup", reflect.TypeOf((*MockReportingI)(nil).WaitForSetup), arg0, arg1)
}
