// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rudderlabs/rudder-server/utils/types (interfaces: GatewayWebhookI,WebHookI,SuppressUserI)

// Package mock_types is a generated GoMock package.
package mock_types

import (
	gomock "github.com/golang/mock/gomock"
	http "net/http"
	reflect "reflect"
)

// MockGatewayWebhookI is a mock of GatewayWebhookI interface
type MockGatewayWebhookI struct {
	ctrl     *gomock.Controller
	recorder *MockGatewayWebhookIMockRecorder
}

// MockGatewayWebhookIMockRecorder is the mock recorder for MockGatewayWebhookI
type MockGatewayWebhookIMockRecorder struct {
	mock *MockGatewayWebhookI
}

// NewMockGatewayWebhookI creates a new mock instance
func NewMockGatewayWebhookI(ctrl *gomock.Controller) *MockGatewayWebhookI {
	mock := &MockGatewayWebhookI{ctrl: ctrl}
	mock.recorder = &MockGatewayWebhookIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGatewayWebhookI) EXPECT() *MockGatewayWebhookIMockRecorder {
	return m.recorder
}

// AddToWebRequestQ mocks base method
func (m *MockGatewayWebhookI) AddToWebRequestQ(arg0 *http.Request, arg1 *http.ResponseWriter, arg2 chan string, arg3 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddToWebRequestQ", arg0, arg1, arg2, arg3)
}

// AddToWebRequestQ indicates an expected call of AddToWebRequestQ
func (mr *MockGatewayWebhookIMockRecorder) AddToWebRequestQ(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToWebRequestQ", reflect.TypeOf((*MockGatewayWebhookI)(nil).AddToWebRequestQ), arg0, arg1, arg2, arg3)
}

// GetWebhookSourceDefName mocks base method
func (m *MockGatewayWebhookI) GetWebhookSourceDefName(arg0 string) (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebhookSourceDefName", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetWebhookSourceDefName indicates an expected call of GetWebhookSourceDefName
func (mr *MockGatewayWebhookIMockRecorder) GetWebhookSourceDefName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebhookSourceDefName", reflect.TypeOf((*MockGatewayWebhookI)(nil).GetWebhookSourceDefName), arg0)
}

// IncrementAckCount mocks base method
func (m *MockGatewayWebhookI) IncrementAckCount(arg0 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncrementAckCount", arg0)
}

// IncrementAckCount indicates an expected call of IncrementAckCount
func (mr *MockGatewayWebhookIMockRecorder) IncrementAckCount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementAckCount", reflect.TypeOf((*MockGatewayWebhookI)(nil).IncrementAckCount), arg0)
}

// IncrementRecvCount mocks base method
func (m *MockGatewayWebhookI) IncrementRecvCount(arg0 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncrementRecvCount", arg0)
}

// IncrementRecvCount indicates an expected call of IncrementRecvCount
func (mr *MockGatewayWebhookIMockRecorder) IncrementRecvCount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementRecvCount", reflect.TypeOf((*MockGatewayWebhookI)(nil).IncrementRecvCount), arg0)
}

// TrackRequestMetrics mocks base method
func (m *MockGatewayWebhookI) TrackRequestMetrics(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TrackRequestMetrics", arg0)
}

// TrackRequestMetrics indicates an expected call of TrackRequestMetrics
func (mr *MockGatewayWebhookIMockRecorder) TrackRequestMetrics(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrackRequestMetrics", reflect.TypeOf((*MockGatewayWebhookI)(nil).TrackRequestMetrics), arg0)
}

// UpdateWriteKeyStats mocks base method
func (m *MockGatewayWebhookI) UpdateWriteKeyStats(arg0 map[string]int, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateWriteKeyStats", arg0, arg1)
}

// UpdateWriteKeyStats indicates an expected call of UpdateWriteKeyStats
func (mr *MockGatewayWebhookIMockRecorder) UpdateWriteKeyStats(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWriteKeyStats", reflect.TypeOf((*MockGatewayWebhookI)(nil).UpdateWriteKeyStats), arg0, arg1)
}

// MockWebHookI is a mock of WebHookI interface
type MockWebHookI struct {
	ctrl     *gomock.Controller
	recorder *MockWebHookIMockRecorder
}

// MockWebHookIMockRecorder is the mock recorder for MockWebHookI
type MockWebHookIMockRecorder struct {
	mock *MockWebHookI
}

// NewMockWebHookI creates a new mock instance
func NewMockWebHookI(ctrl *gomock.Controller) *MockWebHookI {
	mock := &MockWebHookI{ctrl: ctrl}
	mock.recorder = &MockWebHookIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWebHookI) EXPECT() *MockWebHookIMockRecorder {
	return m.recorder
}

// Register mocks base method
func (m *MockWebHookI) Register(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Register", arg0)
}

// Register indicates an expected call of Register
func (mr *MockWebHookIMockRecorder) Register(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockWebHookI)(nil).Register), arg0)
}

// RequestHandler mocks base method
func (m *MockWebHookI) RequestHandler(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RequestHandler", arg0, arg1)
}

// RequestHandler indicates an expected call of RequestHandler
func (mr *MockWebHookIMockRecorder) RequestHandler(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestHandler", reflect.TypeOf((*MockWebHookI)(nil).RequestHandler), arg0, arg1)
}

// MockSuppressUserI is a mock of SuppressUserI interface
type MockSuppressUserI struct {
	ctrl     *gomock.Controller
	recorder *MockSuppressUserIMockRecorder
}

// MockSuppressUserIMockRecorder is the mock recorder for MockSuppressUserI
type MockSuppressUserIMockRecorder struct {
	mock *MockSuppressUserI
}

// NewMockSuppressUserI creates a new mock instance
func NewMockSuppressUserI(ctrl *gomock.Controller) *MockSuppressUserI {
	mock := &MockSuppressUserI{ctrl: ctrl}
	mock.recorder = &MockSuppressUserIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSuppressUserI) EXPECT() *MockSuppressUserIMockRecorder {
	return m.recorder
}

// IsSuppressedUser mocks base method
func (m *MockSuppressUserI) IsSuppressedUser(arg0, arg1, arg2 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSuppressedUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsSuppressedUser indicates an expected call of IsSuppressedUser
func (mr *MockSuppressUserIMockRecorder) IsSuppressedUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSuppressedUser", reflect.TypeOf((*MockSuppressUserI)(nil).IsSuppressedUser), arg0, arg1, arg2)
}
