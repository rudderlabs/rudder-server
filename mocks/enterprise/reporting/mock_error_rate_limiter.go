// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rudderlabs/rudder-server/enterprise/reporting (interfaces: ErrorRateLimiter)
//
// Generated by this command:
//
//	mockgen -destination=mocks/enterprise/reporting/mock_error_rate_limiter.go -package=mocks github.com/rudderlabs/rudder-server/enterprise/reporting ErrorRateLimiter
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockErrorRateLimiter is a mock of ErrorRateLimiter interface.
type MockErrorRateLimiter struct {
	ctrl     *gomock.Controller
	recorder *MockErrorRateLimiterMockRecorder
	isgomock struct{}
}

// MockErrorRateLimiterMockRecorder is the mock recorder for MockErrorRateLimiter.
type MockErrorRateLimiterMockRecorder struct {
	mock *MockErrorRateLimiter
}

// NewMockErrorRateLimiter creates a new mock instance.
func NewMockErrorRateLimiter(ctrl *gomock.Controller) *MockErrorRateLimiter {
	mock := &MockErrorRateLimiter{ctrl: ctrl}
	mock.recorder = &MockErrorRateLimiterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockErrorRateLimiter) EXPECT() *MockErrorRateLimiterMockRecorder {
	return m.recorder
}

// CanonicalizeError mocks base method.
func (m *MockErrorRateLimiter) CanonicalizeError(ctx context.Context, connectionKey, errorMessage string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanonicalizeError", ctx, connectionKey, errorMessage)
	ret0, _ := ret[0].(string)
	return ret0
}

// CanonicalizeError indicates an expected call of CanonicalizeError.
func (mr *MockErrorRateLimiterMockRecorder) CanonicalizeError(ctx, connectionKey, errorMessage any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanonicalizeError", reflect.TypeOf((*MockErrorRateLimiter)(nil).CanonicalizeError), ctx, connectionKey, errorMessage)
}

// StartCleanup mocks base method.
func (m *MockErrorRateLimiter) StartCleanup(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartCleanup", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartCleanup indicates an expected call of StartCleanup.
func (mr *MockErrorRateLimiterMockRecorder) StartCleanup(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartCleanup", reflect.TypeOf((*MockErrorRateLimiter)(nil).StartCleanup), ctx)
}
