// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rudderlabs/rudder-server/enterprise/reporting (interfaces: ErrorNormalizer)
//
// Generated by this command:
//
//	mockgen -destination=mocks/enterprise/reporting/mock_error_normalizer.go -package=mocks github.com/rudderlabs/rudder-server/enterprise/reporting ErrorNormalizer
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	types "github.com/rudderlabs/rudder-server/utils/types"
	gomock "go.uber.org/mock/gomock"
)

// MockErrorNormalizer is a mock of ErrorNormalizer interface.
type MockErrorNormalizer struct {
	ctrl     *gomock.Controller
	recorder *MockErrorNormalizerMockRecorder
	isgomock struct{}
}

// MockErrorNormalizerMockRecorder is the mock recorder for MockErrorNormalizer.
type MockErrorNormalizerMockRecorder struct {
	mock *MockErrorNormalizer
}

// NewMockErrorNormalizer creates a new mock instance.
func NewMockErrorNormalizer(ctrl *gomock.Controller) *MockErrorNormalizer {
	mock := &MockErrorNormalizer{ctrl: ctrl}
	mock.recorder = &MockErrorNormalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockErrorNormalizer) EXPECT() *MockErrorNormalizerMockRecorder {
	return m.recorder
}

// NormalizeError mocks base method.
func (m *MockErrorNormalizer) NormalizeError(ctx context.Context, errorDetailGroupKey types.ErrorDetailGroupKey, errorMessage string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NormalizeError", ctx, errorDetailGroupKey, errorMessage)
	ret0, _ := ret[0].(string)
	return ret0
}

// NormalizeError indicates an expected call of NormalizeError.
func (mr *MockErrorNormalizerMockRecorder) NormalizeError(ctx, errorDetailGroupKey, errorMessage any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NormalizeError", reflect.TypeOf((*MockErrorNormalizer)(nil).NormalizeError), ctx, errorDetailGroupKey, errorMessage)
}

// StartCleanup mocks base method.
func (m *MockErrorNormalizer) StartCleanup(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartCleanup", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartCleanup indicates an expected call of StartCleanup.
func (mr *MockErrorNormalizerMockRecorder) StartCleanup(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartCleanup", reflect.TypeOf((*MockErrorNormalizer)(nil).StartCleanup), ctx)
}
