// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rudderlabs/rudder-server/services/debugger/cache (interfaces: CacheAny)

// Package mocks_cache is a generated GoMock package.
package mocks_cache

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCacheAny is a mock of CacheAny interface.
type MockCacheAny struct {
	ctrl     *gomock.Controller
	recorder *MockCacheAnyMockRecorder
}

// MockCacheAnyMockRecorder is the mock recorder for MockCacheAny.
type MockCacheAnyMockRecorder struct {
	mock *MockCacheAny
}

// NewMockCacheAny creates a new mock instance.
func NewMockCacheAny(ctrl *gomock.Controller) *MockCacheAny {
	mock := &MockCacheAny{ctrl: ctrl}
	mock.recorder = &MockCacheAnyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheAny) EXPECT() *MockCacheAnyMockRecorder {
	return m.recorder
}

// ReadAndPopData mocks base method.
func (m *MockCacheAny) ReadAndPopData(arg0 string) []interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAndPopData", arg0)
	ret0, _ := ret[0].([]interface{})
	return ret0
}

// ReadAndPopData indicates an expected call of ReadAndPopData.
func (mr *MockCacheAnyMockRecorder) ReadAndPopData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAndPopData", reflect.TypeOf((*MockCacheAny)(nil).ReadAndPopData), arg0)
}

// Update mocks base method.
func (m *MockCacheAny) Update(arg0 string, arg1 interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Update", arg0, arg1)
}

// Update indicates an expected call of Update.
func (mr *MockCacheAnyMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCacheAny)(nil).Update), arg0, arg1)
}
