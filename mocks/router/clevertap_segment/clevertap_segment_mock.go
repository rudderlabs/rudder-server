// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rudderlabs/rudder-server/router/batchrouter/asyncdestinationmanager/clevertap_segment (interfaces: ClevertapService)
//
// Generated by this command:
//
//	mockgen -destination=./clevertap_segment_mock.go -package=mocks github.com/rudderlabs/rudder-server/router/batchrouter/asyncdestinationmanager/clevertap_segment ClevertapService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	clevertapSegment "github.com/rudderlabs/rudder-server/router/batchrouter/asyncdestinationmanager/clevertap_segment"
	gomock "go.uber.org/mock/gomock"
)

// MockClevertapService is a mock of ClevertapService interface.
type MockClevertapService struct {
	ctrl     *gomock.Controller
	recorder *MockClevertapServiceMockRecorder
	isgomock struct{}
}

// MockClevertapServiceMockRecorder is the mock recorder for MockClevertapService.
type MockClevertapServiceMockRecorder struct {
	mock *MockClevertapService
}

// NewMockClevertapService creates a new mock instance.
func NewMockClevertapService(ctrl *gomock.Controller) *MockClevertapService {
	mock := &MockClevertapService{ctrl: ctrl}
	mock.recorder = &MockClevertapServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClevertapService) EXPECT() *MockClevertapServiceMockRecorder {
	return m.recorder
}

// MakeHTTPRequest mocks base method.
func (m *MockClevertapService) MakeHTTPRequest(data *clevertapSegment.HttpRequestData) ([]byte, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeHTTPRequest", data)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// MakeHTTPRequest indicates an expected call of MakeHTTPRequest.
func (mr *MockClevertapServiceMockRecorder) MakeHTTPRequest(data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeHTTPRequest", reflect.TypeOf((*MockClevertapService)(nil).MakeHTTPRequest), data)
}

// UploadBulkFile mocks base method.
func (m *MockClevertapService) UploadBulkFile(filePath, presignedURL string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadBulkFile", filePath, presignedURL)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadBulkFile indicates an expected call of UploadBulkFile.
func (mr *MockClevertapServiceMockRecorder) UploadBulkFile(filePath, presignedURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadBulkFile", reflect.TypeOf((*MockClevertapService)(nil).UploadBulkFile), filePath, presignedURL)
}
