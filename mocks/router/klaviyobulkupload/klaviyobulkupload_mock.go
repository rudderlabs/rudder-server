// Code generated by MockGen. DO NOT EDIT.
// Source: klaviyobulkupload.go

// Package mocks is a generated GoMock package.
package mocks

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	common "github.com/rudderlabs/rudder-server/router/batchrouter/asyncdestinationmanager/common"
)

// MockUploader is a mock of Uploader interface.
type MockUploader struct {
	ctrl     *gomock.Controller
	recorder *MockUploaderMockRecorder
}

// MockUploaderMockRecorder is the mock recorder for MockUploader.
type MockUploaderMockRecorder struct {
	mock *MockUploader
}

// NewMockUploader creates a new mock instance.
func NewMockUploader(ctrl *gomock.Controller) *MockUploader {
	mock := &MockUploader{ctrl: ctrl}
	mock.recorder = &MockUploaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUploader) EXPECT() *MockUploaderMockRecorder {
	return m.recorder
}

// Upload mocks base method.
func (m *MockUploader) Upload(arg0 *common.AsyncDestinationStruct) common.AsyncUploadOutput {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upload", arg0)
	ret0, _ := ret[0].(common.AsyncUploadOutput)
	return ret0
}

// Upload indicates an expected call of Upload.
func (mr *MockUploaderMockRecorder) Upload(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockUploader)(nil).Upload), arg0)
}

// MockHttpClient is a mock of HttpClient interface.
type MockHttpClient struct {
	ctrl     *gomock.Controller
	recorder *MockHttpClientMockRecorder
}

// MockHttpClientMockRecorder is the mock recorder for MockHttpClient.
type MockHttpClientMockRecorder struct {
	mock *MockHttpClient
}

// NewMockHttpClient creates a new mock instance.
func NewMockHttpClient(ctrl *gomock.Controller) *MockHttpClient {
	mock := &MockHttpClient{ctrl: ctrl}
	mock.recorder = &MockHttpClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHttpClient) EXPECT() *MockHttpClientMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockHttpClient) Do(req *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockHttpClientMockRecorder) Do(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockHttpClient)(nil).Do), req)
}

// MockPoller is a mock of Poller interface.
type MockPoller struct {
	ctrl     *gomock.Controller
	recorder *MockPollerMockRecorder
}

// MockPollerMockRecorder is the mock recorder for MockPoller.
type MockPollerMockRecorder struct {
	mock *MockPoller
}

// NewMockPoller creates a new mock instance.
func NewMockPoller(ctrl *gomock.Controller) *MockPoller {
	mock := &MockPoller{ctrl: ctrl}
	mock.recorder = &MockPollerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPoller) EXPECT() *MockPollerMockRecorder {
	return m.recorder
}

// Poll mocks base method.
func (m *MockPoller) Poll(input common.AsyncPoll) common.PollStatusResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Poll", input)
	ret0, _ := ret[0].(common.PollStatusResponse)
	return ret0
}

// Poll indicates an expected call of Poll.
func (mr *MockPollerMockRecorder) Poll(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Poll", reflect.TypeOf((*MockPoller)(nil).Poll), input)
}

// MockUploadStats is a mock of UploadStats interface.
type MockUploadStats struct {
	ctrl     *gomock.Controller
	recorder *MockUploadStatsMockRecorder
}

// MockUploadStatsMockRecorder is the mock recorder for MockUploadStats.
type MockUploadStatsMockRecorder struct {
	mock *MockUploadStats
}

// NewMockUploadStats creates a new mock instance.
func NewMockUploadStats(ctrl *gomock.Controller) *MockUploadStats {
	mock := &MockUploadStats{ctrl: ctrl}
	mock.recorder = &MockUploadStatsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUploadStats) EXPECT() *MockUploadStatsMockRecorder {
	return m.recorder
}

// GetUploadStats mocks base method.
func (m *MockUploadStats) GetUploadStats(arg0 common.GetUploadStatsInput) common.GetUploadStatsResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUploadStats", arg0)
	ret0, _ := ret[0].(common.GetUploadStatsResponse)
	return ret0
}

// GetUploadStats indicates an expected call of GetUploadStats.
func (mr *MockUploadStatsMockRecorder) GetUploadStats(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUploadStats", reflect.TypeOf((*MockUploadStats)(nil).GetUploadStats), arg0)
}
