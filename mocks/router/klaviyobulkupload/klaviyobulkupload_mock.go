// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rudderlabs/rudder-server/router/batchrouter/asyncdestinationmanager/klaviyobulkupload (interfaces: KlaviyoAPIService)
//
// Generated by this command:
//
//	mockgen -destination=../../../../mocks/router/klaviyobulkupload/klaviyobulkupload_mock.go -package=mocks github.com/rudderlabs/rudder-server/router/batchrouter/asyncdestinationmanager/klaviyobulkupload KlaviyoAPIService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	klaviyobulkupload "github.com/rudderlabs/rudder-server/router/batchrouter/asyncdestinationmanager/klaviyobulkupload"
	gomock "go.uber.org/mock/gomock"
)

// MockKlaviyoAPIService is a mock of KlaviyoAPIService interface.
type MockKlaviyoAPIService struct {
	ctrl     *gomock.Controller
	recorder *MockKlaviyoAPIServiceMockRecorder
	isgomock struct{}
}

// MockKlaviyoAPIServiceMockRecorder is the mock recorder for MockKlaviyoAPIService.
type MockKlaviyoAPIServiceMockRecorder struct {
	mock *MockKlaviyoAPIService
}

// NewMockKlaviyoAPIService creates a new mock instance.
func NewMockKlaviyoAPIService(ctrl *gomock.Controller) *MockKlaviyoAPIService {
	mock := &MockKlaviyoAPIService{ctrl: ctrl}
	mock.recorder = &MockKlaviyoAPIServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKlaviyoAPIService) EXPECT() *MockKlaviyoAPIServiceMockRecorder {
	return m.recorder
}

// GetUploadErrors mocks base method.
func (m *MockKlaviyoAPIService) GetUploadErrors(importId string) (*klaviyobulkupload.UploadStatusResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUploadErrors", importId)
	ret0, _ := ret[0].(*klaviyobulkupload.UploadStatusResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUploadErrors indicates an expected call of GetUploadErrors.
func (mr *MockKlaviyoAPIServiceMockRecorder) GetUploadErrors(importId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUploadErrors", reflect.TypeOf((*MockKlaviyoAPIService)(nil).GetUploadErrors), importId)
}

// GetUploadStatus mocks base method.
func (m *MockKlaviyoAPIService) GetUploadStatus(importId string) (*klaviyobulkupload.PollResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUploadStatus", importId)
	ret0, _ := ret[0].(*klaviyobulkupload.PollResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUploadStatus indicates an expected call of GetUploadStatus.
func (mr *MockKlaviyoAPIServiceMockRecorder) GetUploadStatus(importId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUploadStatus", reflect.TypeOf((*MockKlaviyoAPIService)(nil).GetUploadStatus), importId)
}

// UploadProfiles mocks base method.
func (m *MockKlaviyoAPIService) UploadProfiles(profiles klaviyobulkupload.Payload) (*klaviyobulkupload.UploadResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadProfiles", profiles)
	ret0, _ := ret[0].(*klaviyobulkupload.UploadResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadProfiles indicates an expected call of UploadProfiles.
func (mr *MockKlaviyoAPIServiceMockRecorder) UploadProfiles(profiles any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadProfiles", reflect.TypeOf((*MockKlaviyoAPIService)(nil).UploadProfiles), profiles)
}
