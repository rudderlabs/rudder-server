// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rudderlabs/rudder-server/router/batchrouter/asyncdestinationmanager/lytics_bulk_upload (interfaces: LyticsService)
//
// Generated by this command:
//
//	mockgen -destination=./lytics_bulk_upload_mock.go -package=mocks github.com/rudderlabs/rudder-server/router/batchrouter/asyncdestinationmanager/lytics_bulk_upload LyticsService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	lyticsBulkUpload "github.com/rudderlabs/rudder-server/router/batchrouter/asyncdestinationmanager/lytics_bulk_upload"
	gomock "go.uber.org/mock/gomock"
)

// MockLyticsService is a mock of LyticsService interface.
type MockLyticsService struct {
	ctrl     *gomock.Controller
	recorder *MockLyticsServiceMockRecorder
}

// MockLyticsServiceMockRecorder is the mock recorder for MockLyticsService.
type MockLyticsServiceMockRecorder struct {
	mock *MockLyticsService
}

// NewMockLyticsService creates a new mock instance.
func NewMockLyticsService(ctrl *gomock.Controller) *MockLyticsService {
	mock := &MockLyticsService{ctrl: ctrl}
	mock.recorder = &MockLyticsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLyticsService) EXPECT() *MockLyticsServiceMockRecorder {
	return m.recorder
}

// MakeHTTPRequest mocks base method.
func (m *MockLyticsService) MakeHTTPRequest(arg0 *lyticsBulkUpload.HttpRequestData) ([]byte, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeHTTPRequest", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// MakeHTTPRequest indicates an expected call of MakeHTTPRequest.
func (mr *MockLyticsServiceMockRecorder) MakeHTTPRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeHTTPRequest", reflect.TypeOf((*MockLyticsService)(nil).MakeHTTPRequest), arg0)
}

// UploadBulkFile mocks base method.
func (m *MockLyticsService) UploadBulkFile(arg0 *lyticsBulkUpload.HttpRequestData, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadBulkFile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadBulkFile indicates an expected call of UploadBulkFile.
func (mr *MockLyticsServiceMockRecorder) UploadBulkFile(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadBulkFile", reflect.TypeOf((*MockLyticsService)(nil).UploadBulkFile), arg0, arg1)
}
