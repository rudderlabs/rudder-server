// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rudderlabs/rudder-server/router (interfaces: HTTPClient,NetHandleI)

// Package mock_network is a generated GoMock package.
package mock_network

import (
	gomock "github.com/golang/mock/gomock"
	integrations "github.com/rudderlabs/rudder-server/processor/integrations"
	http "net/http"
	reflect "reflect"
)

// MockHTTPClient is a mock of HTTPClient interface
type MockHTTPClient struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPClientMockRecorder
}

// MockHTTPClientMockRecorder is the mock recorder for MockHTTPClient
type MockHTTPClientMockRecorder struct {
	mock *MockHTTPClient
}

// NewMockHTTPClient creates a new mock instance
func NewMockHTTPClient(ctrl *gomock.Controller) *MockHTTPClient {
	mock := &MockHTTPClient{ctrl: ctrl}
	mock.recorder = &MockHTTPClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHTTPClient) EXPECT() *MockHTTPClientMockRecorder {
	return m.recorder
}

// Do mocks base method
func (m *MockHTTPClient) Do(arg0 *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", arg0)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do
func (mr *MockHTTPClientMockRecorder) Do(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockHTTPClient)(nil).Do), arg0)
}

// MockNetHandleI is a mock of NetHandleI interface
type MockNetHandleI struct {
	ctrl     *gomock.Controller
	recorder *MockNetHandleIMockRecorder
}

// MockNetHandleIMockRecorder is the mock recorder for MockNetHandleI
type MockNetHandleIMockRecorder struct {
	mock *MockNetHandleI
}

// NewMockNetHandleI creates a new mock instance
func NewMockNetHandleI(ctrl *gomock.Controller) *MockNetHandleI {
	mock := &MockNetHandleI{ctrl: ctrl}
	mock.recorder = &MockNetHandleIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNetHandleI) EXPECT() *MockNetHandleIMockRecorder {
	return m.recorder
}

// SendPost mocks base method
func (m *MockNetHandleI) SendPost(arg0 integrations.PostParametersT) (int, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendPost", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// SendPost indicates an expected call of SendPost
func (mr *MockNetHandleIMockRecorder) SendPost(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendPost", reflect.TypeOf((*MockNetHandleI)(nil).SendPost), arg0)
}
