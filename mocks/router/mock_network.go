// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rudderlabs/rudder-server/router (interfaces: NetHandle)
//
// Generated by this command:
//
//	mockgen -destination=../mocks/router/mock_network.go -package mock_network github.com/rudderlabs/rudder-server/router NetHandle
//

// Package mock_network is a generated GoMock package.
package mock_network

import (
	context "context"
	reflect "reflect"

	integrations "github.com/rudderlabs/rudder-server/processor/integrations"
	utils "github.com/rudderlabs/rudder-server/router/utils"
	gomock "go.uber.org/mock/gomock"
)

// MockNetHandle is a mock of NetHandle interface.
type MockNetHandle struct {
	ctrl     *gomock.Controller
	recorder *MockNetHandleMockRecorder
	isgomock struct{}
}

// MockNetHandleMockRecorder is the mock recorder for MockNetHandle.
type MockNetHandleMockRecorder struct {
	mock *MockNetHandle
}

// NewMockNetHandle creates a new mock instance.
func NewMockNetHandle(ctrl *gomock.Controller) *MockNetHandle {
	mock := &MockNetHandle{ctrl: ctrl}
	mock.recorder = &MockNetHandleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetHandle) EXPECT() *MockNetHandleMockRecorder {
	return m.recorder
}

// SendPost mocks base method.
func (m *MockNetHandle) SendPost(ctx context.Context, structData integrations.PostParametersT) *utils.SendPostResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendPost", ctx, structData)
	ret0, _ := ret[0].(*utils.SendPostResponse)
	return ret0
}

// SendPost indicates an expected call of SendPost.
func (mr *MockNetHandleMockRecorder) SendPost(ctx, structData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendPost", reflect.TypeOf((*MockNetHandle)(nil).SendPost), ctx, structData)
}
