// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rudderlabs/rudder-server/gateway/webhook (interfaces: Webhook)
//
// Generated by this command:
//
//	mockgen -destination=../../mocks/gateway/webhook.go -package=mocks_gateway github.com/rudderlabs/rudder-server/gateway/webhook Webhook
//

// Package mocks_gateway is a generated GoMock package.
package mocks_gateway

import (
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockWebhook is a mock of Webhook interface.
type MockWebhook struct {
	ctrl     *gomock.Controller
	recorder *MockWebhookMockRecorder
	isgomock struct{}
}

// MockWebhookMockRecorder is the mock recorder for MockWebhook.
type MockWebhookMockRecorder struct {
	mock *MockWebhook
}

// NewMockWebhook creates a new mock instance.
func NewMockWebhook(ctrl *gomock.Controller) *MockWebhook {
	mock := &MockWebhook{ctrl: ctrl}
	mock.recorder = &MockWebhookMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebhook) EXPECT() *MockWebhookMockRecorder {
	return m.recorder
}

// Register mocks base method.
func (m *MockWebhook) Register(name string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Register", name)
}

// Register indicates an expected call of Register.
func (mr *MockWebhookMockRecorder) Register(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockWebhook)(nil).Register), name)
}

// RequestHandler mocks base method.
func (m *MockWebhook) RequestHandler(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RequestHandler", w, r)
}

// RequestHandler indicates an expected call of RequestHandler.
func (mr *MockWebhookMockRecorder) RequestHandler(w, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestHandler", reflect.TypeOf((*MockWebhook)(nil).RequestHandler), w, r)
}

// Shutdown mocks base method.
func (m *MockWebhook) Shutdown() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shutdown")
	ret0, _ := ret[0].(error)
	return ret0
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockWebhookMockRecorder) Shutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockWebhook)(nil).Shutdown))
}
