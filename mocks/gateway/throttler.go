// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rudderlabs/rudder-server/gateway/throttler (interfaces: GetThrottler)

// Package mocks_gateway is a generated GoMock package.
package mocks_gateway

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockGetThrottler is a mock of GetThrottler interface.
type MockGetThrottler struct {
	ctrl     *gomock.Controller
	recorder *MockGetThrottlerMockRecorder
}

// MockGetThrottlerMockRecorder is the mock recorder for MockGetThrottler.
type MockGetThrottlerMockRecorder struct {
	mock *MockGetThrottler
}

// NewMockGetThrottler creates a new mock instance.
func NewMockGetThrottler(ctrl *gomock.Controller) *MockGetThrottler {
	mock := &MockGetThrottler{ctrl: ctrl}
	mock.recorder = &MockGetThrottlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetThrottler) EXPECT() *MockGetThrottlerMockRecorder {
	return m.recorder
}

// CheckLimitReached mocks base method.
func (m *MockGetThrottler) CheckLimitReached(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckLimitReached", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckLimitReached indicates an expected call of CheckLimitReached.
func (mr *MockGetThrottlerMockRecorder) CheckLimitReached(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckLimitReached", reflect.TypeOf((*MockGetThrottler)(nil).CheckLimitReached), arg0)
}
