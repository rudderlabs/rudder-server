// Code generated by MockGen. DO NOT EDIT.
// Source: jobsdb/jobsdb.go

// Package mock_jobsdb is a generated GoMock package.
package mocks_jobsdb

import (
	context "context"
	sql "database/sql"
	json "encoding/json"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	jobsdb "github.com/rudderlabs/rudder-server/jobsdb"
)

// MockStoreSafeTx is a mock of StoreSafeTx interface.
type MockStoreSafeTx struct {
	ctrl     *gomock.Controller
	recorder *MockStoreSafeTxMockRecorder
}

// MockStoreSafeTxMockRecorder is the mock recorder for MockStoreSafeTx.
type MockStoreSafeTxMockRecorder struct {
	mock *MockStoreSafeTx
}

// NewMockStoreSafeTx creates a new mock instance.
func NewMockStoreSafeTx(ctrl *gomock.Controller) *MockStoreSafeTx {
	mock := &MockStoreSafeTx{ctrl: ctrl}
	mock.recorder = &MockStoreSafeTxMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStoreSafeTx) EXPECT() *MockStoreSafeTxMockRecorder {
	return m.recorder
}

// SqlTx mocks base method.
func (m *MockStoreSafeTx) SqlTx() *sql.Tx {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SqlTx")
	ret0, _ := ret[0].(*sql.Tx)
	return ret0
}

// SqlTx indicates an expected call of SqlTx.
func (mr *MockStoreSafeTxMockRecorder) SqlTx() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SqlTx", reflect.TypeOf((*MockStoreSafeTx)(nil).SqlTx))
}

// Tx mocks base method.
func (m *MockStoreSafeTx) Tx() *jobsdb.Tx {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tx")
	ret0, _ := ret[0].(*jobsdb.Tx)
	return ret0
}

// Tx indicates an expected call of Tx.
func (mr *MockStoreSafeTxMockRecorder) Tx() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tx", reflect.TypeOf((*MockStoreSafeTx)(nil).Tx))
}

// storeSafeTxIdentifier mocks base method.
func (m *MockStoreSafeTx) storeSafeTxIdentifier() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "storeSafeTxIdentifier")
	ret0, _ := ret[0].(string)
	return ret0
}

// storeSafeTxIdentifier indicates an expected call of storeSafeTxIdentifier.
func (mr *MockStoreSafeTxMockRecorder) storeSafeTxIdentifier() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "storeSafeTxIdentifier", reflect.TypeOf((*MockStoreSafeTx)(nil).storeSafeTxIdentifier))
}

// MockUpdateSafeTx is a mock of UpdateSafeTx interface.
type MockUpdateSafeTx struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateSafeTxMockRecorder
}

// MockUpdateSafeTxMockRecorder is the mock recorder for MockUpdateSafeTx.
type MockUpdateSafeTxMockRecorder struct {
	mock *MockUpdateSafeTx
}

// NewMockUpdateSafeTx creates a new mock instance.
func NewMockUpdateSafeTx(ctrl *gomock.Controller) *MockUpdateSafeTx {
	mock := &MockUpdateSafeTx{ctrl: ctrl}
	mock.recorder = &MockUpdateSafeTxMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdateSafeTx) EXPECT() *MockUpdateSafeTxMockRecorder {
	return m.recorder
}

// SqlTx mocks base method.
func (m *MockUpdateSafeTx) SqlTx() *sql.Tx {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SqlTx")
	ret0, _ := ret[0].(*sql.Tx)
	return ret0
}

// SqlTx indicates an expected call of SqlTx.
func (mr *MockUpdateSafeTxMockRecorder) SqlTx() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SqlTx", reflect.TypeOf((*MockUpdateSafeTx)(nil).SqlTx))
}

// Tx mocks base method.
func (m *MockUpdateSafeTx) Tx() *jobsdb.Tx {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tx")
	ret0, _ := ret[0].(*jobsdb.Tx)
	return ret0
}

// Tx indicates an expected call of Tx.
func (mr *MockUpdateSafeTxMockRecorder) Tx() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tx", reflect.TypeOf((*MockUpdateSafeTx)(nil).Tx))
}

// updateSafeTxSealIdentifier mocks base method.
func (m *MockUpdateSafeTx) updateSafeTxSealIdentifier() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "updateSafeTxSealIdentifier")
	ret0, _ := ret[0].(string)
	return ret0
}

// updateSafeTxSealIdentifier indicates an expected call of updateSafeTxSealIdentifier.
func (mr *MockUpdateSafeTxMockRecorder) updateSafeTxSealIdentifier() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "updateSafeTxSealIdentifier", reflect.TypeOf((*MockUpdateSafeTx)(nil).updateSafeTxSealIdentifier))
}

// MockJobsDB is a mock of JobsDB interface.
type MockJobsDB struct {
	ctrl     *gomock.Controller
	recorder *MockJobsDBMockRecorder
}

// MockJobsDBMockRecorder is the mock recorder for MockJobsDB.
type MockJobsDBMockRecorder struct {
	mock *MockJobsDB
}

// NewMockJobsDB creates a new mock instance.
func NewMockJobsDB(ctrl *gomock.Controller) *MockJobsDB {
	mock := &MockJobsDB{ctrl: ctrl}
	mock.recorder = &MockJobsDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobsDB) EXPECT() *MockJobsDBMockRecorder {
	return m.recorder
}

// DeleteExecuting mocks base method.
func (m *MockJobsDB) DeleteExecuting() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteExecuting")
}

// DeleteExecuting indicates an expected call of DeleteExecuting.
func (mr *MockJobsDBMockRecorder) DeleteExecuting() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExecuting", reflect.TypeOf((*MockJobsDB)(nil).DeleteExecuting))
}

// FailExecuting mocks base method.
func (m *MockJobsDB) FailExecuting() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FailExecuting")
}

// FailExecuting indicates an expected call of FailExecuting.
func (mr *MockJobsDBMockRecorder) FailExecuting() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FailExecuting", reflect.TypeOf((*MockJobsDB)(nil).FailExecuting))
}

// GetExecuting mocks base method.
func (m *MockJobsDB) GetExecuting(ctx context.Context, params jobsdb.GetQueryParamsT) (jobsdb.JobsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExecuting", ctx, params)
	ret0, _ := ret[0].(jobsdb.JobsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExecuting indicates an expected call of GetExecuting.
func (mr *MockJobsDBMockRecorder) GetExecuting(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecuting", reflect.TypeOf((*MockJobsDB)(nil).GetExecuting), ctx, params)
}

// GetImporting mocks base method.
func (m *MockJobsDB) GetImporting(ctx context.Context, params jobsdb.GetQueryParamsT) (jobsdb.JobsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImporting", ctx, params)
	ret0, _ := ret[0].(jobsdb.JobsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImporting indicates an expected call of GetImporting.
func (mr *MockJobsDBMockRecorder) GetImporting(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImporting", reflect.TypeOf((*MockJobsDB)(nil).GetImporting), ctx, params)
}

// GetJournalEntries mocks base method.
func (m *MockJobsDB) GetJournalEntries(opType string) []jobsdb.JournalEntryT {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJournalEntries", opType)
	ret0, _ := ret[0].([]jobsdb.JournalEntryT)
	return ret0
}

// GetJournalEntries indicates an expected call of GetJournalEntries.
func (mr *MockJobsDBMockRecorder) GetJournalEntries(opType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJournalEntries", reflect.TypeOf((*MockJobsDB)(nil).GetJournalEntries), opType)
}

// GetPending mocks base method.
func (m *MockJobsDB) GetPending(ctx context.Context, params jobsdb.GetQueryParamsT) (jobsdb.JobsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPending", ctx, params)
	ret0, _ := ret[0].(jobsdb.JobsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPending indicates an expected call of GetPending.
func (mr *MockJobsDBMockRecorder) GetPending(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPending", reflect.TypeOf((*MockJobsDB)(nil).GetPending), ctx, params)
}

// GetPileUpCounts mocks base method.
func (m *MockJobsDB) GetPileUpCounts(ctx context.Context) (map[string]map[string]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPileUpCounts", ctx)
	ret0, _ := ret[0].(map[string]map[string]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPileUpCounts indicates an expected call of GetPileUpCounts.
func (mr *MockJobsDBMockRecorder) GetPileUpCounts(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPileUpCounts", reflect.TypeOf((*MockJobsDB)(nil).GetPileUpCounts), ctx)
}

// GetProcessed mocks base method.
func (m *MockJobsDB) GetProcessed(ctx context.Context, params jobsdb.GetQueryParamsT) (jobsdb.JobsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProcessed", ctx, params)
	ret0, _ := ret[0].(jobsdb.JobsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProcessed indicates an expected call of GetProcessed.
func (mr *MockJobsDBMockRecorder) GetProcessed(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProcessed", reflect.TypeOf((*MockJobsDB)(nil).GetProcessed), ctx, params)
}

// GetToRetry mocks base method.
func (m *MockJobsDB) GetToRetry(ctx context.Context, params jobsdb.GetQueryParamsT) (jobsdb.JobsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToRetry", ctx, params)
	ret0, _ := ret[0].(jobsdb.JobsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetToRetry indicates an expected call of GetToRetry.
func (mr *MockJobsDBMockRecorder) GetToRetry(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToRetry", reflect.TypeOf((*MockJobsDB)(nil).GetToRetry), ctx, params)
}

// GetUnprocessed mocks base method.
func (m *MockJobsDB) GetUnprocessed(ctx context.Context, params jobsdb.GetQueryParamsT) (jobsdb.JobsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnprocessed", ctx, params)
	ret0, _ := ret[0].(jobsdb.JobsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnprocessed indicates an expected call of GetUnprocessed.
func (mr *MockJobsDBMockRecorder) GetUnprocessed(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnprocessed", reflect.TypeOf((*MockJobsDB)(nil).GetUnprocessed), ctx, params)
}

// GetWaiting mocks base method.
func (m *MockJobsDB) GetWaiting(ctx context.Context, params jobsdb.GetQueryParamsT) (jobsdb.JobsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWaiting", ctx, params)
	ret0, _ := ret[0].(jobsdb.JobsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWaiting indicates an expected call of GetWaiting.
func (mr *MockJobsDBMockRecorder) GetWaiting(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWaiting", reflect.TypeOf((*MockJobsDB)(nil).GetWaiting), ctx, params)
}

// Identifier mocks base method.
func (m *MockJobsDB) Identifier() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Identifier")
	ret0, _ := ret[0].(string)
	return ret0
}

// Identifier indicates an expected call of Identifier.
func (mr *MockJobsDBMockRecorder) Identifier() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Identifier", reflect.TypeOf((*MockJobsDB)(nil).Identifier))
}

// JournalDeleteEntry mocks base method.
func (m *MockJobsDB) JournalDeleteEntry(opID int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "JournalDeleteEntry", opID)
}

// JournalDeleteEntry indicates an expected call of JournalDeleteEntry.
func (mr *MockJobsDBMockRecorder) JournalDeleteEntry(opID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JournalDeleteEntry", reflect.TypeOf((*MockJobsDB)(nil).JournalDeleteEntry), opID)
}

// JournalMarkStart mocks base method.
func (m *MockJobsDB) JournalMarkStart(opType string, opPayload json.RawMessage) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JournalMarkStart", opType, opPayload)
	ret0, _ := ret[0].(int64)
	return ret0
}

// JournalMarkStart indicates an expected call of JournalMarkStart.
func (mr *MockJobsDBMockRecorder) JournalMarkStart(opType, opPayload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JournalMarkStart", reflect.TypeOf((*MockJobsDB)(nil).JournalMarkStart), opType, opPayload)
}

// Ping mocks base method.
func (m *MockJobsDB) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockJobsDBMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockJobsDB)(nil).Ping))
}

// Status mocks base method.
func (m *MockJobsDB) Status() interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Status indicates an expected call of Status.
func (mr *MockJobsDBMockRecorder) Status() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockJobsDB)(nil).Status))
}

// Store mocks base method.
func (m *MockJobsDB) Store(ctx context.Context, jobList []*jobsdb.JobT) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", ctx, jobList)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockJobsDBMockRecorder) Store(ctx, jobList interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockJobsDB)(nil).Store), ctx, jobList)
}

// StoreInTx mocks base method.
func (m *MockJobsDB) StoreInTx(ctx context.Context, tx jobsdb.StoreSafeTx, jobList []*jobsdb.JobT) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreInTx", ctx, tx, jobList)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreInTx indicates an expected call of StoreInTx.
func (mr *MockJobsDBMockRecorder) StoreInTx(ctx, tx, jobList interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreInTx", reflect.TypeOf((*MockJobsDB)(nil).StoreInTx), ctx, tx, jobList)
}

// StoreWithRetryEach mocks base method.
func (m *MockJobsDB) StoreWithRetryEach(ctx context.Context, jobList []*jobsdb.JobT) map[uuid.UUID]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreWithRetryEach", ctx, jobList)
	ret0, _ := ret[0].(map[uuid.UUID]string)
	return ret0
}

// StoreWithRetryEach indicates an expected call of StoreWithRetryEach.
func (mr *MockJobsDBMockRecorder) StoreWithRetryEach(ctx, jobList interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreWithRetryEach", reflect.TypeOf((*MockJobsDB)(nil).StoreWithRetryEach), ctx, jobList)
}

// StoreWithRetryEachInTx mocks base method.
func (m *MockJobsDB) StoreWithRetryEachInTx(ctx context.Context, tx jobsdb.StoreSafeTx, jobList []*jobsdb.JobT) (map[uuid.UUID]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreWithRetryEachInTx", ctx, tx, jobList)
	ret0, _ := ret[0].(map[uuid.UUID]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreWithRetryEachInTx indicates an expected call of StoreWithRetryEachInTx.
func (mr *MockJobsDBMockRecorder) StoreWithRetryEachInTx(ctx, tx, jobList interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreWithRetryEachInTx", reflect.TypeOf((*MockJobsDB)(nil).StoreWithRetryEachInTx), ctx, tx, jobList)
}

// UpdateJobStatus mocks base method.
func (m *MockJobsDB) UpdateJobStatus(ctx context.Context, statusList []*jobsdb.JobStatusT, customValFilters []string, parameterFilters []jobsdb.ParameterFilterT) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateJobStatus", ctx, statusList, customValFilters, parameterFilters)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateJobStatus indicates an expected call of UpdateJobStatus.
func (mr *MockJobsDBMockRecorder) UpdateJobStatus(ctx, statusList, customValFilters, parameterFilters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJobStatus", reflect.TypeOf((*MockJobsDB)(nil).UpdateJobStatus), ctx, statusList, customValFilters, parameterFilters)
}

// UpdateJobStatusInTx mocks base method.
func (m *MockJobsDB) UpdateJobStatusInTx(ctx context.Context, tx jobsdb.UpdateSafeTx, statusList []*jobsdb.JobStatusT, customValFilters []string, parameterFilters []jobsdb.ParameterFilterT) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateJobStatusInTx", ctx, tx, statusList, customValFilters, parameterFilters)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateJobStatusInTx indicates an expected call of UpdateJobStatusInTx.
func (mr *MockJobsDBMockRecorder) UpdateJobStatusInTx(ctx, tx, statusList, customValFilters, parameterFilters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJobStatusInTx", reflect.TypeOf((*MockJobsDB)(nil).UpdateJobStatusInTx), ctx, tx, statusList, customValFilters, parameterFilters)
}

// WithStoreSafeTx mocks base method.
func (m *MockJobsDB) WithStoreSafeTx(arg0 context.Context, arg1 func(jobsdb.StoreSafeTx) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithStoreSafeTx", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithStoreSafeTx indicates an expected call of WithStoreSafeTx.
func (mr *MockJobsDBMockRecorder) WithStoreSafeTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithStoreSafeTx", reflect.TypeOf((*MockJobsDB)(nil).WithStoreSafeTx), arg0, arg1)
}

// WithTx mocks base method.
func (m *MockJobsDB) WithTx(arg0 func(*jobsdb.Tx) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTx", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithTx indicates an expected call of WithTx.
func (mr *MockJobsDBMockRecorder) WithTx(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTx", reflect.TypeOf((*MockJobsDB)(nil).WithTx), arg0)
}

// WithUpdateSafeTx mocks base method.
func (m *MockJobsDB) WithUpdateSafeTx(arg0 context.Context, arg1 func(jobsdb.UpdateSafeTx) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithUpdateSafeTx", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithUpdateSafeTx indicates an expected call of WithUpdateSafeTx.
func (mr *MockJobsDBMockRecorder) WithUpdateSafeTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithUpdateSafeTx", reflect.TypeOf((*MockJobsDB)(nil).WithUpdateSafeTx), arg0, arg1)
}

// MockassertInterface is a mock of assertInterface interface.
type MockassertInterface struct {
	ctrl     *gomock.Controller
	recorder *MockassertInterfaceMockRecorder
}

// MockassertInterfaceMockRecorder is the mock recorder for MockassertInterface.
type MockassertInterfaceMockRecorder struct {
	mock *MockassertInterface
}

// NewMockassertInterface creates a new mock instance.
func NewMockassertInterface(ctrl *gomock.Controller) *MockassertInterface {
	mock := &MockassertInterface{ctrl: ctrl}
	mock.recorder = &MockassertInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockassertInterface) EXPECT() *MockassertInterfaceMockRecorder {
	return m.recorder
}

// assert mocks base method.
func (m *MockassertInterface) assert(cond bool, errorString string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "assert", cond, errorString)
}

// assert indicates an expected call of assert.
func (mr *MockassertInterfaceMockRecorder) assert(cond, errorString interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "assert", reflect.TypeOf((*MockassertInterface)(nil).assert), cond, errorString)
}

// assertError mocks base method.
func (m *MockassertInterface) assertError(err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "assertError", err)
}

// assertError indicates an expected call of assertError.
func (mr *MockassertInterfaceMockRecorder) assertError(err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "assertError", reflect.TypeOf((*MockassertInterface)(nil).assertError), err)
}

// MocktransactionHandler is a mock of transactionHandler interface.
type MocktransactionHandler struct {
	ctrl     *gomock.Controller
	recorder *MocktransactionHandlerMockRecorder
}

// MocktransactionHandlerMockRecorder is the mock recorder for MocktransactionHandler.
type MocktransactionHandlerMockRecorder struct {
	mock *MocktransactionHandler
}

// NewMocktransactionHandler creates a new mock instance.
func NewMocktransactionHandler(ctrl *gomock.Controller) *MocktransactionHandler {
	mock := &MocktransactionHandler{ctrl: ctrl}
	mock.recorder = &MocktransactionHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktransactionHandler) EXPECT() *MocktransactionHandlerMockRecorder {
	return m.recorder
}

// Exec mocks base method.
func (m *MocktransactionHandler) Exec(arg0 string, arg1 ...interface{}) (sql.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MocktransactionHandlerMockRecorder) Exec(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MocktransactionHandler)(nil).Exec), varargs...)
}

// Prepare mocks base method.
func (m *MocktransactionHandler) Prepare(query string) (*sql.Stmt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Prepare", query)
	ret0, _ := ret[0].(*sql.Stmt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Prepare indicates an expected call of Prepare.
func (mr *MocktransactionHandlerMockRecorder) Prepare(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prepare", reflect.TypeOf((*MocktransactionHandler)(nil).Prepare), query)
}
