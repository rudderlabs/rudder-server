// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rudderlabs/rudder-server/jobsdb (interfaces: JobsDB)

// Package mocks_jobsdb is a generated GoMock package.
package mocks_jobsdb

import (
	gomock "github.com/golang/mock/gomock"
	jobsdb "github.com/rudderlabs/rudder-server/jobsdb"
	uuid "github.com/satori/go.uuid"
	reflect "reflect"
)

// MockJobsDB is a mock of JobsDB interface
type MockJobsDB struct {
	ctrl     *gomock.Controller
	recorder *MockJobsDBMockRecorder
}

// MockJobsDBMockRecorder is the mock recorder for MockJobsDB
type MockJobsDBMockRecorder struct {
	mock *MockJobsDB
}

// NewMockJobsDB creates a new mock instance
func NewMockJobsDB(ctrl *gomock.Controller) *MockJobsDB {
	mock := &MockJobsDB{ctrl: ctrl}
	mock.recorder = &MockJobsDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockJobsDB) EXPECT() *MockJobsDBMockRecorder {
	return m.recorder
}

// CheckPGHealth mocks base method
func (m *MockJobsDB) CheckPGHealth() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPGHealth")
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckPGHealth indicates an expected call of CheckPGHealth
func (mr *MockJobsDBMockRecorder) CheckPGHealth() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPGHealth", reflect.TypeOf((*MockJobsDB)(nil).CheckPGHealth))
}

// Store mocks base method
func (m *MockJobsDB) Store(arg0 []*jobsdb.JobT) map[uuid.UUID]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", arg0)
	ret0, _ := ret[0].(map[uuid.UUID]string)
	return ret0
}

// Store indicates an expected call of Store
func (mr *MockJobsDBMockRecorder) Store(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockJobsDB)(nil).Store), arg0)
}
