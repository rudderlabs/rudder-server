// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rudderlabs/rudder-server/config/backend-config (interfaces: BackendConfig,CommonBackendConfigI)

// Package mock_backendconfig is a generated GoMock package.
package mock_backendconfig

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	backendconfig "github.com/rudderlabs/rudder-server/config/backend-config"
	utils "github.com/rudderlabs/rudder-server/utils"
)

// MockBackendConfig is a mock of BackendConfig interface
type MockBackendConfig struct {
	ctrl     *gomock.Controller
	recorder *MockBackendConfigMockRecorder
}

// MockBackendConfigMockRecorder is the mock recorder for MockBackendConfig
type MockBackendConfigMockRecorder struct {
	mock *MockBackendConfig
}

// NewMockBackendConfig creates a new mock instance
func NewMockBackendConfig(ctrl *gomock.Controller) *MockBackendConfig {
	mock := &MockBackendConfig{ctrl: ctrl}
	mock.recorder = &MockBackendConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBackendConfig) EXPECT() *MockBackendConfigMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockBackendConfig) Get() (backendconfig.SourcesT, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].(backendconfig.SourcesT)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockBackendConfigMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockBackendConfig)(nil).Get))
}

// GetWorkspaceIDForWriteKey mocks base method
func (m *MockBackendConfig) GetWorkspaceIDForWriteKey(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkspaceIDForWriteKey", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetWorkspaceIDForWriteKey indicates an expected call of GetWorkspaceIDForWriteKey
func (mr *MockBackendConfigMockRecorder) GetWorkspaceIDForWriteKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkspaceIDForWriteKey", reflect.TypeOf((*MockBackendConfig)(nil).GetWorkspaceIDForWriteKey), arg0)
}

// SetUp mocks base method
func (m *MockBackendConfig) SetUp() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetUp")
}

// SetUp indicates an expected call of SetUp
func (mr *MockBackendConfigMockRecorder) SetUp() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUp", reflect.TypeOf((*MockBackendConfig)(nil).SetUp))
}

// MockCommonBackendConfigI is a mock of CommonBackendConfigI interface
type MockCommonBackendConfigI struct {
	ctrl     *gomock.Controller
	recorder *MockCommonBackendConfigIMockRecorder
}

// MockCommonBackendConfigIMockRecorder is the mock recorder for MockCommonBackendConfigI
type MockCommonBackendConfigIMockRecorder struct {
	mock *MockCommonBackendConfigI
}

// NewMockCommonBackendConfigI creates a new mock instance
func NewMockCommonBackendConfigI(ctrl *gomock.Controller) *MockCommonBackendConfigI {
	mock := &MockCommonBackendConfigI{ctrl: ctrl}
	mock.recorder = &MockCommonBackendConfigIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCommonBackendConfigI) EXPECT() *MockCommonBackendConfigIMockRecorder {
	return m.recorder
}

// Subscribe mocks base method
func (m *MockBackendConfig) Subscribe(arg0 chan utils.DataEvent, arg1 backendconfig.Topic) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Subscribe", arg0, arg1)
}

// Subscribe indicates an expected call of Subscribe
func (mr *MockCommonBackendConfigIMockRecorder) Subscribe(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockCommonBackendConfigI)(nil).Subscribe), arg0, arg1)
}

// WaitForConfig mocks base method
func (m *MockCommonBackendConfigI) WaitForConfig() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WaitForConfig")
}

// WaitForConfig indicates an expected call of WaitForConfig
func (mr *MockCommonBackendConfigIMockRecorder) WaitForConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForConfig", reflect.TypeOf((*MockCommonBackendConfigI)(nil).WaitForConfig))
}
