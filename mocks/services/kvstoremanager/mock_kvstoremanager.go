// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rudderlabs/rudder-server/services/kvstoremanager (interfaces: KVStoreManager)
//
// Generated by this command:
//
//	mockgen -destination=../../mocks/services/kvstoremanager/mock_kvstoremanager.go -package=mock_kvstoremanager github.com/rudderlabs/rudder-server/services/kvstoremanager KVStoreManager
//

// Package mock_kvstoremanager is a generated GoMock package.
package mock_kvstoremanager

import (
	json "encoding/json"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockKVStoreManager is a mock of KVStoreManager interface.
type MockKVStoreManager struct {
	ctrl     *gomock.Controller
	recorder *MockKVStoreManagerMockRecorder
}

// MockKVStoreManagerMockRecorder is the mock recorder for MockKVStoreManager.
type MockKVStoreManagerMockRecorder struct {
	mock *MockKVStoreManager
}

// NewMockKVStoreManager creates a new mock instance.
func NewMockKVStoreManager(ctrl *gomock.Controller) *MockKVStoreManager {
	mock := &MockKVStoreManager{ctrl: ctrl}
	mock.recorder = &MockKVStoreManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKVStoreManager) EXPECT() *MockKVStoreManagerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockKVStoreManager) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockKVStoreManagerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockKVStoreManager)(nil).Close))
}

// CreateClient mocks base method.
func (m *MockKVStoreManager) CreateClient() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateClient")
}

// CreateClient indicates an expected call of CreateClient.
func (mr *MockKVStoreManagerMockRecorder) CreateClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClient", reflect.TypeOf((*MockKVStoreManager)(nil).CreateClient))
}

// DeleteKey mocks base method.
func (m *MockKVStoreManager) DeleteKey(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKey", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteKey indicates an expected call of DeleteKey.
func (mr *MockKVStoreManagerMockRecorder) DeleteKey(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKey", reflect.TypeOf((*MockKVStoreManager)(nil).DeleteKey), arg0)
}

// HGetAll mocks base method.
func (m *MockKVStoreManager) HGetAll(arg0 string) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HGetAll", arg0)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HGetAll indicates an expected call of HGetAll.
func (mr *MockKVStoreManagerMockRecorder) HGetAll(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HGetAll", reflect.TypeOf((*MockKVStoreManager)(nil).HGetAll), arg0)
}

// HMGet mocks base method.
func (m *MockKVStoreManager) HMGet(arg0 string, arg1 ...string) ([]any, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HMGet", varargs...)
	ret0, _ := ret[0].([]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HMGet indicates an expected call of HMGet.
func (mr *MockKVStoreManagerMockRecorder) HMGet(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HMGet", reflect.TypeOf((*MockKVStoreManager)(nil).HMGet), varargs...)
}

// HMSet mocks base method.
func (m *MockKVStoreManager) HMSet(arg0 string, arg1 map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HMSet", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// HMSet indicates an expected call of HMSet.
func (mr *MockKVStoreManagerMockRecorder) HMSet(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HMSet", reflect.TypeOf((*MockKVStoreManager)(nil).HMSet), arg0, arg1)
}

// HSet mocks base method.
func (m *MockKVStoreManager) HSet(arg0, arg1 string, arg2 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HSet", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// HSet indicates an expected call of HSet.
func (mr *MockKVStoreManagerMockRecorder) HSet(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HSet", reflect.TypeOf((*MockKVStoreManager)(nil).HSet), arg0, arg1, arg2)
}

// SendDataAsJSON mocks base method.
func (m *MockKVStoreManager) SendDataAsJSON(arg0 json.RawMessage, arg1 map[string]any) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendDataAsJSON", arg0, arg1)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendDataAsJSON indicates an expected call of SendDataAsJSON.
func (mr *MockKVStoreManagerMockRecorder) SendDataAsJSON(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendDataAsJSON", reflect.TypeOf((*MockKVStoreManager)(nil).SendDataAsJSON), arg0, arg1)
}

// ShouldSendDataAsJSON mocks base method.
func (m *MockKVStoreManager) ShouldSendDataAsJSON(arg0 map[string]any) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldSendDataAsJSON", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ShouldSendDataAsJSON indicates an expected call of ShouldSendDataAsJSON.
func (mr *MockKVStoreManagerMockRecorder) ShouldSendDataAsJSON(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldSendDataAsJSON", reflect.TypeOf((*MockKVStoreManager)(nil).ShouldSendDataAsJSON), arg0)
}

// StatusCode mocks base method.
func (m *MockKVStoreManager) StatusCode(arg0 error) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatusCode", arg0)
	ret0, _ := ret[0].(int)
	return ret0
}

// StatusCode indicates an expected call of StatusCode.
func (mr *MockKVStoreManagerMockRecorder) StatusCode(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusCode", reflect.TypeOf((*MockKVStoreManager)(nil).StatusCode), arg0)
}
