// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rudderlabs/rudder-server/services/dedup/types (interfaces: DedupInterface)
//
// Generated by this command:
//
//	mockgen -destination=../../mocks/services/dedup/mock_dedup.go -package mock_dedup github.com/rudderlabs/rudder-server/services/dedup/types DedupInterface
//

// Package mock_dedup is a generated GoMock package.
package mock_dedup

import (
	reflect "reflect"

	types "github.com/rudderlabs/rudder-server/services/dedup/types"
	gomock "go.uber.org/mock/gomock"
)

// MockDedupInterface is a mock of DedupInterface interface.
type MockDedupInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDedupInterfaceMockRecorder
	isgomock struct{}
}

// MockDedupInterfaceMockRecorder is the mock recorder for MockDedupInterface.
type MockDedupInterfaceMockRecorder struct {
	mock *MockDedupInterface
}

// NewMockDedupInterface creates a new mock instance.
func NewMockDedupInterface(ctrl *gomock.Controller) *MockDedupInterface {
	mock := &MockDedupInterface{ctrl: ctrl}
	mock.recorder = &MockDedupInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDedupInterface) EXPECT() *MockDedupInterfaceMockRecorder {
	return m.recorder
}

// Allowed mocks base method.
func (m *MockDedupInterface) Allowed(keys ...types.BatchKey) (map[types.BatchKey]bool, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Allowed", varargs...)
	ret0, _ := ret[0].(map[types.BatchKey]bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Allowed indicates an expected call of Allowed.
func (mr *MockDedupInterfaceMockRecorder) Allowed(keys ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Allowed", reflect.TypeOf((*MockDedupInterface)(nil).Allowed), keys...)
}

// Close mocks base method.
func (m *MockDedupInterface) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockDedupInterfaceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDedupInterface)(nil).Close))
}

// Commit mocks base method.
func (m *MockDedupInterface) Commit(keys []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", keys)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockDedupInterfaceMockRecorder) Commit(keys any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockDedupInterface)(nil).Commit), keys)
}
