// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rudderlabs/rudder-server/services/dedup (interfaces: Dedup)
//
// Generated by this command:
//
//	mockgen -destination=../../mocks/services/dedup/mock_dedup.go -package mock_dedup github.com/rudderlabs/rudder-server/services/dedup Dedup
//

// Package mock_dedup is a generated GoMock package.
package mock_dedup

import (
	reflect "reflect"

	types "github.com/rudderlabs/rudder-server/services/dedup/types"
	gomock "go.uber.org/mock/gomock"
)

// MockDedup is a mock of Dedup interface.
type MockDedup struct {
	ctrl     *gomock.Controller
	recorder *MockDedupMockRecorder
}

// MockDedupMockRecorder is the mock recorder for MockDedup.
type MockDedupMockRecorder struct {
	mock *MockDedup
}

// NewMockDedup creates a new mock instance.
func NewMockDedup(ctrl *gomock.Controller) *MockDedup {
	mock := &MockDedup{ctrl: ctrl}
	mock.recorder = &MockDedupMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDedup) EXPECT() *MockDedupMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockDedup) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockDedupMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDedup)(nil).Close))
}

// Commit mocks base method.
func (m *MockDedup) Commit(arg0 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockDedupMockRecorder) Commit(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockDedup)(nil).Commit), arg0)
}

// Get mocks base method.
func (m *MockDedup) Get(arg0 types.KeyValue) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDedupMockRecorder) Get(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDedup)(nil).Get), arg0)
}

// GetBatch mocks base method.
func (m *MockDedup) GetBatch(arg0 []types.KeyValue) (map[types.KeyValue]bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBatch", arg0)
	ret0, _ := ret[0].(map[types.KeyValue]bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBatch indicates an expected call of GetBatch.
func (mr *MockDedupMockRecorder) GetBatch(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBatch", reflect.TypeOf((*MockDedup)(nil).GetBatch), arg0)
}
