// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rudderlabs/rudder-server/services/debugger (interfaces: TransformerAny)

// Package mock_debugger is a generated GoMock package.
package mock_debugger

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTransformerAny is a mock of TransformerAny interface.
type MockTransformerAny struct {
	ctrl     *gomock.Controller
	recorder *MockTransformerAnyMockRecorder
}

// MockTransformerAnyMockRecorder is the mock recorder for MockTransformerAny.
type MockTransformerAnyMockRecorder struct {
	mock *MockTransformerAny
}

// NewMockTransformerAny creates a new mock instance.
func NewMockTransformerAny(ctrl *gomock.Controller) *MockTransformerAny {
	mock := &MockTransformerAny{ctrl: ctrl}
	mock.recorder = &MockTransformerAnyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransformerAny) EXPECT() *MockTransformerAnyMockRecorder {
	return m.recorder
}

// Transform mocks base method.
func (m *MockTransformerAny) Transform(arg0 []interface{}) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transform", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Transform indicates an expected call of Transform.
func (mr *MockTransformerAnyMockRecorder) Transform(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transform", reflect.TypeOf((*MockTransformerAny)(nil).Transform), arg0)
}
