// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rudderlabs/rudder-server/services/debugger (interfaces: Transformer,UploaderI)

// Package mock_debugger is a generated GoMock package.
package mock_debugger

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTransformer is a mock of Transformer interface.
type MockTransformer struct {
	ctrl     *gomock.Controller
	recorder *MockTransformerMockRecorder
}

// MockTransformerMockRecorder is the mock recorder for MockTransformer.
type MockTransformerMockRecorder struct {
	mock *MockTransformer
}

// NewMockTransformer creates a new mock instance.
func NewMockTransformer(ctrl *gomock.Controller) *MockTransformer {
	mock := &MockTransformer{ctrl: ctrl}
	mock.recorder = &MockTransformerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransformer) EXPECT() *MockTransformerMockRecorder {
	return m.recorder
}

// Transform mocks base method.
func (m *MockTransformer) Transform(arg0 interface{}) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transform", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Transform indicates an expected call of Transform.
func (mr *MockTransformerMockRecorder) Transform(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transform", reflect.TypeOf((*MockTransformer)(nil).Transform), arg0)
}

// MockUploaderI is a mock of UploaderI interface.
type MockUploaderI struct {
	ctrl     *gomock.Controller
	recorder *MockUploaderIMockRecorder
}

// MockUploaderIMockRecorder is the mock recorder for MockUploaderI.
type MockUploaderIMockRecorder struct {
	mock *MockUploaderI
}

// NewMockUploaderI creates a new mock instance.
func NewMockUploaderI(ctrl *gomock.Controller) *MockUploaderI {
	mock := &MockUploaderI{ctrl: ctrl}
	mock.recorder = &MockUploaderIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUploaderI) EXPECT() *MockUploaderIMockRecorder {
	return m.recorder
}

// RecordEvent mocks base method.
func (m *MockUploaderI) RecordEvent(arg0 interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordEvent", arg0)
}

// RecordEvent indicates an expected call of RecordEvent.
func (mr *MockUploaderIMockRecorder) RecordEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordEvent", reflect.TypeOf((*MockUploaderI)(nil).RecordEvent), arg0)
}

// Start mocks base method.
func (m *MockUploaderI) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockUploaderIMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockUploaderI)(nil).Start))
}

// Stop mocks base method.
func (m *MockUploaderI) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockUploaderIMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockUploaderI)(nil).Stop))
}
