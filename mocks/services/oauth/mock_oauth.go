// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rudderlabs/rudder-server/services/oauth (interfaces: Authorizer)
//
// Generated by this command:
//
//	mockgen -destination=../../mocks/services/oauth/mock_oauth.go -package=mocks_oauth github.com/rudderlabs/rudder-server/services/oauth Authorizer
//

// Package mocks_oauth is a generated GoMock package.
package mocks_oauth

import (
	reflect "reflect"

	oauth "github.com/rudderlabs/rudder-server/services/oauth"
	gomock "go.uber.org/mock/gomock"
)

// MockAuthorizer is a mock of Authorizer interface.
type MockAuthorizer struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizerMockRecorder
	isgomock struct{}
}

// MockAuthorizerMockRecorder is the mock recorder for MockAuthorizer.
type MockAuthorizerMockRecorder struct {
	mock *MockAuthorizer
}

// NewMockAuthorizer creates a new mock instance.
func NewMockAuthorizer(ctrl *gomock.Controller) *MockAuthorizer {
	mock := &MockAuthorizer{ctrl: ctrl}
	mock.recorder = &MockAuthorizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorizer) EXPECT() *MockAuthorizerMockRecorder {
	return m.recorder
}

// AuthStatusToggle mocks base method.
func (m *MockAuthorizer) AuthStatusToggle(arg0 *oauth.AuthStatusToggleParams) (int, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthStatusToggle", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// AuthStatusToggle indicates an expected call of AuthStatusToggle.
func (mr *MockAuthorizerMockRecorder) AuthStatusToggle(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthStatusToggle", reflect.TypeOf((*MockAuthorizer)(nil).AuthStatusToggle), arg0)
}

// FetchToken mocks base method.
func (m *MockAuthorizer) FetchToken(fetchTokenParams *oauth.RefreshTokenParams) (int, *oauth.AuthResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchToken", fetchTokenParams)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(*oauth.AuthResponse)
	return ret0, ret1
}

// FetchToken indicates an expected call of FetchToken.
func (mr *MockAuthorizerMockRecorder) FetchToken(fetchTokenParams any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchToken", reflect.TypeOf((*MockAuthorizer)(nil).FetchToken), fetchTokenParams)
}

// RefreshToken mocks base method.
func (m *MockAuthorizer) RefreshToken(refTokenParams *oauth.RefreshTokenParams) (int, *oauth.AuthResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshToken", refTokenParams)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(*oauth.AuthResponse)
	return ret0, ret1
}

// RefreshToken indicates an expected call of RefreshToken.
func (mr *MockAuthorizerMockRecorder) RefreshToken(refTokenParams any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshToken", reflect.TypeOf((*MockAuthorizer)(nil).RefreshToken), refTokenParams)
}
