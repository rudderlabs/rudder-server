// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rudderlabs/rudder-server/services/oauth (interfaces: Authorizer)

// Package mocks_oauth is a generated GoMock package.
package mocks_oauth

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	backendconfig "github.com/rudderlabs/rudder-server/config/backend-config"
	oauth "github.com/rudderlabs/rudder-server/services/oauth"
)

// MockAuthorizer is a mock of Authorizer interface.
type MockAuthorizer struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizerMockRecorder
}

// MockAuthorizerMockRecorder is the mock recorder for MockAuthorizer.
type MockAuthorizerMockRecorder struct {
	mock *MockAuthorizer
}

// NewMockAuthorizer creates a new mock instance.
func NewMockAuthorizer(ctrl *gomock.Controller) *MockAuthorizer {
	mock := &MockAuthorizer{ctrl: ctrl}
	mock.recorder = &MockAuthorizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorizer) EXPECT() *MockAuthorizerMockRecorder {
	return m.recorder
}

// DisableDestination mocks base method.
func (m *MockAuthorizer) DisableDestination(arg0 *backendconfig.DestinationT, arg1, arg2 string) (int, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableDestination", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// DisableDestination indicates an expected call of DisableDestination.
func (mr *MockAuthorizerMockRecorder) DisableDestination(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableDestination", reflect.TypeOf((*MockAuthorizer)(nil).DisableDestination), arg0, arg1, arg2)
}

// FetchToken mocks base method.
func (m *MockAuthorizer) FetchToken(arg0 *oauth.RefreshTokenParams) (int, *oauth.AuthResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchToken", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(*oauth.AuthResponse)
	return ret0, ret1
}

// FetchToken indicates an expected call of FetchToken.
func (mr *MockAuthorizerMockRecorder) FetchToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchToken", reflect.TypeOf((*MockAuthorizer)(nil).FetchToken), arg0)
}

// RefreshToken mocks base method.
func (m *MockAuthorizer) RefreshToken(arg0 *oauth.RefreshTokenParams) (int, *oauth.AuthResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshToken", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(*oauth.AuthResponse)
	return ret0, ret1
}

// RefreshToken indicates an expected call of RefreshToken.
func (mr *MockAuthorizerMockRecorder) RefreshToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshToken", reflect.TypeOf((*MockAuthorizer)(nil).RefreshToken), arg0)
}
