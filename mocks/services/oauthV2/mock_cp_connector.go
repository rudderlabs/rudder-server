// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/sudippaul/workspace/rudder-server/services/oauth/v2/cp_connector.go

// Package mock_oauthV2 is a generated GoMock package.
package mock_oauthV2

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v2 "github.com/rudderlabs/rudder-server/services/oauth/v2"
)

// MockControlPlaneConnectorI is a mock of ControlPlaneConnectorI interface.
type MockControlPlaneConnectorI struct {
	ctrl     *gomock.Controller
	recorder *MockControlPlaneConnectorIMockRecorder
}

// MockControlPlaneConnectorIMockRecorder is the mock recorder for MockControlPlaneConnectorI.
type MockControlPlaneConnectorIMockRecorder struct {
	mock *MockControlPlaneConnectorI
}

// NewMockControlPlaneConnectorI creates a new mock instance.
func NewMockControlPlaneConnectorI(ctrl *gomock.Controller) *MockControlPlaneConnectorI {
	mock := &MockControlPlaneConnectorI{ctrl: ctrl}
	mock.recorder = &MockControlPlaneConnectorIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControlPlaneConnectorI) EXPECT() *MockControlPlaneConnectorIMockRecorder {
	return m.recorder
}

// CpApiCall mocks base method.
func (m *MockControlPlaneConnectorI) CpApiCall(cpReq *v2.ControlPlaneRequestT) (int, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CpApiCall", cpReq)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// CpApiCall indicates an expected call of CpApiCall.
func (mr *MockControlPlaneConnectorIMockRecorder) CpApiCall(cpReq interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CpApiCall", reflect.TypeOf((*MockControlPlaneConnectorI)(nil).CpApiCall), cpReq)
}
