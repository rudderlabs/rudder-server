// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/saisankeerth/rudderstack/rudder-server/services/oauth/v2/controlplane/cp_connector.go

// Package mock_oauthV2 is a generated GoMock package.
package mock_oauthV2

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	controlplane "github.com/rudderlabs/rudder-server/services/oauth/v2/controlplane"
)

// MockControlPlaneConnector is a mock of ControlPlaneConnector interface.
type MockControlPlaneConnector struct {
	ctrl     *gomock.Controller
	recorder *MockControlPlaneConnectorMockRecorder
}

// MockControlPlaneConnectorMockRecorder is the mock recorder for MockControlPlaneConnector.
type MockControlPlaneConnectorMockRecorder struct {
	mock *MockControlPlaneConnector
}

// NewMockControlPlaneConnector creates a new mock instance.
func NewMockControlPlaneConnector(ctrl *gomock.Controller) *MockControlPlaneConnector {
	mock := &MockControlPlaneConnector{ctrl: ctrl}
	mock.recorder = &MockControlPlaneConnectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControlPlaneConnector) EXPECT() *MockControlPlaneConnectorMockRecorder {
	return m.recorder
}

// CpApiCall mocks base method.
func (m *MockControlPlaneConnector) CpApiCall(cpReq *controlplane.ControlPlaneRequest) (int, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CpApiCall", cpReq)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// CpApiCall indicates an expected call of CpApiCall.
func (mr *MockControlPlaneConnectorMockRecorder) CpApiCall(cpReq interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CpApiCall", reflect.TypeOf((*MockControlPlaneConnector)(nil).CpApiCall), cpReq)
}
