// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rudderlabs/rudder-server/services/oauth/v2/controlplane (interfaces: Connector)
//
// Generated by this command:
//
//	mockgen -destination=../../../../mocks/services/oauthV2/mock_cp_connector.go -package=mock_oauthV2 github.com/rudderlabs/rudder-server/services/oauth/v2/controlplane Connector
//

// Package mock_oauthV2 is a generated GoMock package.
package mock_oauthV2

import (
	reflect "reflect"

	controlplane "github.com/rudderlabs/rudder-server/services/oauth/v2/controlplane"
	gomock "go.uber.org/mock/gomock"
)

// MockConnector is a mock of Connector interface.
type MockConnector struct {
	ctrl     *gomock.Controller
	recorder *MockConnectorMockRecorder
	isgomock struct{}
}

// MockConnectorMockRecorder is the mock recorder for MockConnector.
type MockConnectorMockRecorder struct {
	mock *MockConnector
}

// NewMockConnector creates a new mock instance.
func NewMockConnector(ctrl *gomock.Controller) *MockConnector {
	mock := &MockConnector{ctrl: ctrl}
	mock.recorder = &MockConnectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnector) EXPECT() *MockConnectorMockRecorder {
	return m.recorder
}

// CpApiCall mocks base method.
func (m *MockConnector) CpApiCall(cpReq *controlplane.Request) (int, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CpApiCall", cpReq)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// CpApiCall indicates an expected call of CpApiCall.
func (mr *MockConnectorMockRecorder) CpApiCall(cpReq any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CpApiCall", reflect.TypeOf((*MockConnector)(nil).CpApiCall), cpReq)
}
