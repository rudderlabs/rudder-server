// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/sudippaul/workspace/rudder-server/services/oauth/v2/types.go

// Package mock_oauthV2 is a generated GoMock package.
package mock_oauthV2

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	identity "github.com/rudderlabs/rudder-server/services/controlplane/identity"
	v2 "github.com/rudderlabs/rudder-server/services/oauth/v2"
)

// MockTokenProvider is a mock of TokenProvider interface.
type MockTokenProvider struct {
	ctrl     *gomock.Controller
	recorder *MockTokenProviderMockRecorder
}

// MockTokenProviderMockRecorder is the mock recorder for MockTokenProvider.
type MockTokenProviderMockRecorder struct {
	mock *MockTokenProvider
}

// NewMockTokenProvider creates a new mock instance.
func NewMockTokenProvider(ctrl *gomock.Controller) *MockTokenProvider {
	mock := &MockTokenProvider{ctrl: ctrl}
	mock.recorder = &MockTokenProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenProvider) EXPECT() *MockTokenProviderMockRecorder {
	return m.recorder
}

// Identity mocks base method.
func (m *MockTokenProvider) Identity() identity.Identifier {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Identity")
	ret0, _ := ret[0].(identity.Identifier)
	return ret0
}

// Identity indicates an expected call of Identity.
func (mr *MockTokenProviderMockRecorder) Identity() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Identity", reflect.TypeOf((*MockTokenProvider)(nil).Identity))
}

// MockAuthorizer is a mock of Authorizer interface.
type MockAuthorizer struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizerMockRecorder
}

// MockAuthorizerMockRecorder is the mock recorder for MockAuthorizer.
type MockAuthorizerMockRecorder struct {
	mock *MockAuthorizer
}

// NewMockAuthorizer creates a new mock instance.
func NewMockAuthorizer(ctrl *gomock.Controller) *MockAuthorizer {
	mock := &MockAuthorizer{ctrl: ctrl}
	mock.recorder = &MockAuthorizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorizer) EXPECT() *MockAuthorizerMockRecorder {
	return m.recorder
}

// AuthStatusToggle mocks base method.
func (m *MockAuthorizer) AuthStatusToggle(authStatusToggleParams *v2.AuthStatusToggleParams) (int, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthStatusToggle", authStatusToggleParams)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// AuthStatusToggle indicates an expected call of AuthStatusToggle.
func (mr *MockAuthorizerMockRecorder) AuthStatusToggle(authStatusToggleParams interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthStatusToggle", reflect.TypeOf((*MockAuthorizer)(nil).AuthStatusToggle), authStatusToggleParams)
}

// FetchToken mocks base method.
func (m *MockAuthorizer) FetchToken(fetchTokenParams *v2.RefreshTokenParams) (int, *v2.AuthResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchToken", fetchTokenParams)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(*v2.AuthResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FetchToken indicates an expected call of FetchToken.
func (mr *MockAuthorizerMockRecorder) FetchToken(fetchTokenParams interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchToken", reflect.TypeOf((*MockAuthorizer)(nil).FetchToken), fetchTokenParams)
}

// RefreshToken mocks base method.
func (m *MockAuthorizer) RefreshToken(refTokenParams *v2.RefreshTokenParams) (int, *v2.AuthResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshToken", refTokenParams)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(*v2.AuthResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RefreshToken indicates an expected call of RefreshToken.
func (mr *MockAuthorizerMockRecorder) RefreshToken(refTokenParams interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshToken", reflect.TypeOf((*MockAuthorizer)(nil).RefreshToken), refTokenParams)
}
