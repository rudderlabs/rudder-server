// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rudderlabs/rudder-server/services/streammanager/eventbridge (interfaces: EventBridgeClient)
//
// Generated by this command:
//
//	mockgen -destination=../../../mocks/services/streammanager/eventbridge/mock_eventbridge.go -package mock_eventbridge github.com/rudderlabs/rudder-server/services/streammanager/eventbridge EventBridgeClient
//

// Package mock_eventbridge is a generated GoMock package.
package mock_eventbridge

import (
	reflect "reflect"

	eventbridge "github.com/aws/aws-sdk-go/service/eventbridge"
	gomock "go.uber.org/mock/gomock"
)

// MockEventBridgeClient is a mock of EventBridgeClient interface.
type MockEventBridgeClient struct {
	ctrl     *gomock.Controller
	recorder *MockEventBridgeClientMockRecorder
	isgomock struct{}
}

// MockEventBridgeClientMockRecorder is the mock recorder for MockEventBridgeClient.
type MockEventBridgeClientMockRecorder struct {
	mock *MockEventBridgeClient
}

// NewMockEventBridgeClient creates a new mock instance.
func NewMockEventBridgeClient(ctrl *gomock.Controller) *MockEventBridgeClient {
	mock := &MockEventBridgeClient{ctrl: ctrl}
	mock.recorder = &MockEventBridgeClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventBridgeClient) EXPECT() *MockEventBridgeClientMockRecorder {
	return m.recorder
}

// PutEvents mocks base method.
func (m *MockEventBridgeClient) PutEvents(input *eventbridge.PutEventsInput) (*eventbridge.PutEventsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutEvents", input)
	ret0, _ := ret[0].(*eventbridge.PutEventsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutEvents indicates an expected call of PutEvents.
func (mr *MockEventBridgeClientMockRecorder) PutEvents(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutEvents", reflect.TypeOf((*MockEventBridgeClient)(nil).PutEvents), input)
}
