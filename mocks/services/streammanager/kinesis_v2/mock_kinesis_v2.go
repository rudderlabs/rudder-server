// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rudderlabs/rudder-server/services/streammanager/kinesis (interfaces: KinesisClientV2)
//
// Generated by this command:
//
//	mockgen -destination=../../../mocks/services/streammanager/kinesis_v2/mock_kinesis_v2.go -package mock_kinesis_v2 github.com/rudderlabs/rudder-server/services/streammanager/kinesis KinesisClientV2
//

// Package mock_kinesis_v2 is a generated GoMock package.
package mock_kinesis_v2

import (
	context "context"
	reflect "reflect"

	kinesis "github.com/aws/aws-sdk-go-v2/service/kinesis"
	gomock "go.uber.org/mock/gomock"
)

// MockKinesisClientV2 is a mock of KinesisClientV2 interface.
type MockKinesisClientV2 struct {
	ctrl     *gomock.Controller
	recorder *MockKinesisClientV2MockRecorder
	isgomock struct{}
}

// MockKinesisClientV2MockRecorder is the mock recorder for MockKinesisClientV2.
type MockKinesisClientV2MockRecorder struct {
	mock *MockKinesisClientV2
}

// NewMockKinesisClientV2 creates a new mock instance.
func NewMockKinesisClientV2(ctrl *gomock.Controller) *MockKinesisClientV2 {
	mock := &MockKinesisClientV2{ctrl: ctrl}
	mock.recorder = &MockKinesisClientV2MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKinesisClientV2) EXPECT() *MockKinesisClientV2MockRecorder {
	return m.recorder
}

// PutRecord mocks base method.
func (m *MockKinesisClientV2) PutRecord(ctx context.Context, input *kinesis.PutRecordInput, opts ...func(*kinesis.Options)) (*kinesis.PutRecordOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, input}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutRecord", varargs...)
	ret0, _ := ret[0].(*kinesis.PutRecordOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutRecord indicates an expected call of PutRecord.
func (mr *MockKinesisClientV2MockRecorder) PutRecord(ctx, input any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, input}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutRecord", reflect.TypeOf((*MockKinesisClientV2)(nil).PutRecord), varargs...)
}
