// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rudderlabs/rudder-server/services/streammanager/common (interfaces: StreamProducer,ClosableStreamProducer)

// Package mock_streammanager is a generated GoMock package.
package mock_streammanager

import (
	json "encoding/json"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStreamProducer is a mock of StreamProducer interface.
type MockStreamProducer struct {
	ctrl     *gomock.Controller
	recorder *MockStreamProducerMockRecorder
}

// MockStreamProducerMockRecorder is the mock recorder for MockStreamProducer.
type MockStreamProducerMockRecorder struct {
	mock *MockStreamProducer
}

// NewMockStreamProducer creates a new mock instance.
func NewMockStreamProducer(ctrl *gomock.Controller) *MockStreamProducer {
	mock := &MockStreamProducer{ctrl: ctrl}
	mock.recorder = &MockStreamProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamProducer) EXPECT() *MockStreamProducerMockRecorder {
	return m.recorder
}

// Produce mocks base method.
func (m *MockStreamProducer) Produce(arg0 json.RawMessage, arg1 interface{}) (int, string, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Produce", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(string)
	return ret0, ret1, ret2
}

// Produce indicates an expected call of Produce.
func (mr *MockStreamProducerMockRecorder) Produce(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Produce", reflect.TypeOf((*MockStreamProducer)(nil).Produce), arg0, arg1)
}

// MockClosableStreamProducer is a mock of ClosableStreamProducer interface.
type MockClosableStreamProducer struct {
	ctrl     *gomock.Controller
	recorder *MockClosableStreamProducerMockRecorder
}

// MockClosableStreamProducerMockRecorder is the mock recorder for MockClosableStreamProducer.
type MockClosableStreamProducerMockRecorder struct {
	mock *MockClosableStreamProducer
}

// NewMockClosableStreamProducer creates a new mock instance.
func NewMockClosableStreamProducer(ctrl *gomock.Controller) *MockClosableStreamProducer {
	mock := &MockClosableStreamProducer{ctrl: ctrl}
	mock.recorder = &MockClosableStreamProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClosableStreamProducer) EXPECT() *MockClosableStreamProducerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockClosableStreamProducer) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockClosableStreamProducerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClosableStreamProducer)(nil).Close))
}
