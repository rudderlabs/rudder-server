// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rudderlabs/rudder-server/services/streammanager/personalize (interfaces: PersonalizeClientV1)
//
// Generated by this command:
//
//	mockgen -destination=../../../mocks/services/streammanager/personalize_v1/mock_personalize_v1.go -package mock_personalize_v1 github.com/rudderlabs/rudder-server/services/streammanager/personalize PersonalizeClientV1
//

// Package mock_personalize_v1 is a generated GoMock package.
package mock_personalize_v1

import (
	reflect "reflect"

	personalizeevents "github.com/aws/aws-sdk-go/service/personalizeevents"
	gomock "go.uber.org/mock/gomock"
)

// MockPersonalizeClientV1 is a mock of PersonalizeClientV1 interface.
type MockPersonalizeClientV1 struct {
	ctrl     *gomock.Controller
	recorder *MockPersonalizeClientV1MockRecorder
	isgomock struct{}
}

// MockPersonalizeClientV1MockRecorder is the mock recorder for MockPersonalizeClientV1.
type MockPersonalizeClientV1MockRecorder struct {
	mock *MockPersonalizeClientV1
}

// NewMockPersonalizeClientV1 creates a new mock instance.
func NewMockPersonalizeClientV1(ctrl *gomock.Controller) *MockPersonalizeClientV1 {
	mock := &MockPersonalizeClientV1{ctrl: ctrl}
	mock.recorder = &MockPersonalizeClientV1MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPersonalizeClientV1) EXPECT() *MockPersonalizeClientV1MockRecorder {
	return m.recorder
}

// PutEvents mocks base method.
func (m *MockPersonalizeClientV1) PutEvents(input *personalizeevents.PutEventsInput) (*personalizeevents.PutEventsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutEvents", input)
	ret0, _ := ret[0].(*personalizeevents.PutEventsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutEvents indicates an expected call of PutEvents.
func (mr *MockPersonalizeClientV1MockRecorder) PutEvents(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutEvents", reflect.TypeOf((*MockPersonalizeClientV1)(nil).PutEvents), input)
}

// PutItems mocks base method.
func (m *MockPersonalizeClientV1) PutItems(input *personalizeevents.PutItemsInput) (*personalizeevents.PutItemsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutItems", input)
	ret0, _ := ret[0].(*personalizeevents.PutItemsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutItems indicates an expected call of PutItems.
func (mr *MockPersonalizeClientV1MockRecorder) PutItems(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutItems", reflect.TypeOf((*MockPersonalizeClientV1)(nil).PutItems), input)
}

// PutUsers mocks base method.
func (m *MockPersonalizeClientV1) PutUsers(input *personalizeevents.PutUsersInput) (*personalizeevents.PutUsersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutUsers", input)
	ret0, _ := ret[0].(*personalizeevents.PutUsersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutUsers indicates an expected call of PutUsers.
func (mr *MockPersonalizeClientV1MockRecorder) PutUsers(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutUsers", reflect.TypeOf((*MockPersonalizeClientV1)(nil).PutUsers), input)
}
