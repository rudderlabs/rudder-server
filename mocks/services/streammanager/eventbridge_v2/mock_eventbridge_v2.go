// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rudderlabs/rudder-server/services/streammanager/eventbridge (interfaces: EventBridgeClientV2)
//
// Generated by this command:
//
//	mockgen -destination=../../../mocks/services/streammanager/eventbridge_v2/mock_eventbridge_v2.go -package mock_eventbridge_v2 github.com/rudderlabs/rudder-server/services/streammanager/eventbridge EventBridgeClientV2
//

// Package mock_eventbridge_v2 is a generated GoMock package.
package mock_eventbridge_v2

import (
	context "context"
	reflect "reflect"

	eventbridge "github.com/aws/aws-sdk-go-v2/service/eventbridge"
	gomock "go.uber.org/mock/gomock"
)

// MockEventBridgeClientV2 is a mock of EventBridgeClientV2 interface.
type MockEventBridgeClientV2 struct {
	ctrl     *gomock.Controller
	recorder *MockEventBridgeClientV2MockRecorder
	isgomock struct{}
}

// MockEventBridgeClientV2MockRecorder is the mock recorder for MockEventBridgeClientV2.
type MockEventBridgeClientV2MockRecorder struct {
	mock *MockEventBridgeClientV2
}

// NewMockEventBridgeClientV2 creates a new mock instance.
func NewMockEventBridgeClientV2(ctrl *gomock.Controller) *MockEventBridgeClientV2 {
	mock := &MockEventBridgeClientV2{ctrl: ctrl}
	mock.recorder = &MockEventBridgeClientV2MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventBridgeClientV2) EXPECT() *MockEventBridgeClientV2MockRecorder {
	return m.recorder
}

// PutEvents mocks base method.
func (m *MockEventBridgeClientV2) PutEvents(ctx context.Context, input *eventbridge.PutEventsInput, opts ...func(*eventbridge.Options)) (*eventbridge.PutEventsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, input}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutEvents", varargs...)
	ret0, _ := ret[0].(*eventbridge.PutEventsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutEvents indicates an expected call of PutEvents.
func (mr *MockEventBridgeClientV2MockRecorder) PutEvents(ctx, input any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, input}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutEvents", reflect.TypeOf((*MockEventBridgeClientV2)(nil).PutEvents), varargs...)
}
