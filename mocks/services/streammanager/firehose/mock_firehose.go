// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rudderlabs/rudder-server/services/streammanager/firehose (interfaces: FirehoseClient)
//
// Generated by this command:
//
//	mockgen -destination=../../../mocks/services/streammanager/firehose/mock_firehose.go -package mock_firehose github.com/rudderlabs/rudder-server/services/streammanager/firehose FirehoseClient
//

// Package mock_firehose is a generated GoMock package.
package mock_firehose

import (
	context "context"
	reflect "reflect"

	firehose "github.com/aws/aws-sdk-go-v2/service/firehose"
	gomock "go.uber.org/mock/gomock"
)

// MockFirehoseClient is a mock of FirehoseClient interface.
type MockFirehoseClient struct {
	ctrl     *gomock.Controller
	recorder *MockFirehoseClientMockRecorder
	isgomock struct{}
}

// MockFirehoseClientMockRecorder is the mock recorder for MockFirehoseClient.
type MockFirehoseClientMockRecorder struct {
	mock *MockFirehoseClient
}

// NewMockFirehoseClient creates a new mock instance.
func NewMockFirehoseClient(ctrl *gomock.Controller) *MockFirehoseClient {
	mock := &MockFirehoseClient{ctrl: ctrl}
	mock.recorder = &MockFirehoseClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFirehoseClient) EXPECT() *MockFirehoseClientMockRecorder {
	return m.recorder
}

// PutRecord mocks base method.
func (m *MockFirehoseClient) PutRecord(ctx context.Context, input *firehose.PutRecordInput, opts ...func(*firehose.Options)) (*firehose.PutRecordOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, input}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutRecord", varargs...)
	ret0, _ := ret[0].(*firehose.PutRecordOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutRecord indicates an expected call of PutRecord.
func (mr *MockFirehoseClientMockRecorder) PutRecord(ctx, input any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, input}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutRecord", reflect.TypeOf((*MockFirehoseClient)(nil).PutRecord), varargs...)
}
