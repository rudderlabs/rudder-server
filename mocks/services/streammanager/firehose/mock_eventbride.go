// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rudderlabs/rudder-server/services/streammanager/firehose (interfaces: FireHoseClient)

// Package mock_eventbride is a generated GoMock package.
package mock_eventbride

import (
	reflect "reflect"

	firehose "github.com/aws/aws-sdk-go/service/firehose"
	gomock "github.com/golang/mock/gomock"
)

// MockFireHoseClient is a mock of FireHoseClient interface.
type MockFireHoseClient struct {
	ctrl     *gomock.Controller
	recorder *MockFireHoseClientMockRecorder
}

// MockFireHoseClientMockRecorder is the mock recorder for MockFireHoseClient.
type MockFireHoseClientMockRecorder struct {
	mock *MockFireHoseClient
}

// NewMockFireHoseClient creates a new mock instance.
func NewMockFireHoseClient(ctrl *gomock.Controller) *MockFireHoseClient {
	mock := &MockFireHoseClient{ctrl: ctrl}
	mock.recorder = &MockFireHoseClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFireHoseClient) EXPECT() *MockFireHoseClientMockRecorder {
	return m.recorder
}

// PutRecord mocks base method.
func (m *MockFireHoseClient) PutRecord(arg0 *firehose.PutRecordInput) (*firehose.PutRecordOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutRecord", arg0)
	ret0, _ := ret[0].(*firehose.PutRecordOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutRecord indicates an expected call of PutRecord.
func (mr *MockFireHoseClientMockRecorder) PutRecord(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutRecord", reflect.TypeOf((*MockFireHoseClient)(nil).PutRecord), arg0)
}
