// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rudderlabs/rudder-server/services/streammanager/personalize (interfaces: PersonalizeClientV2)
//
// Generated by this command:
//
//	mockgen -destination=../../../mocks/services/streammanager/personalize_v2/mock_personalize_v2.go -package mock_personalize_v2 github.com/rudderlabs/rudder-server/services/streammanager/personalize PersonalizeClientV2
//

// Package mock_personalize_v2 is a generated GoMock package.
package mock_personalize_v2

import (
	context "context"
	reflect "reflect"

	personalizeevents "github.com/aws/aws-sdk-go-v2/service/personalizeevents"
	gomock "go.uber.org/mock/gomock"
)

// MockPersonalizeClientV2 is a mock of PersonalizeClientV2 interface.
type MockPersonalizeClientV2 struct {
	ctrl     *gomock.Controller
	recorder *MockPersonalizeClientV2MockRecorder
	isgomock struct{}
}

// MockPersonalizeClientV2MockRecorder is the mock recorder for MockPersonalizeClientV2.
type MockPersonalizeClientV2MockRecorder struct {
	mock *MockPersonalizeClientV2
}

// NewMockPersonalizeClientV2 creates a new mock instance.
func NewMockPersonalizeClientV2(ctrl *gomock.Controller) *MockPersonalizeClientV2 {
	mock := &MockPersonalizeClientV2{ctrl: ctrl}
	mock.recorder = &MockPersonalizeClientV2MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPersonalizeClientV2) EXPECT() *MockPersonalizeClientV2MockRecorder {
	return m.recorder
}

// PutEvents mocks base method.
func (m *MockPersonalizeClientV2) PutEvents(ctx context.Context, input *personalizeevents.PutEventsInput, opts ...func(*personalizeevents.Options)) (*personalizeevents.PutEventsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, input}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutEvents", varargs...)
	ret0, _ := ret[0].(*personalizeevents.PutEventsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutEvents indicates an expected call of PutEvents.
func (mr *MockPersonalizeClientV2MockRecorder) PutEvents(ctx, input any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, input}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutEvents", reflect.TypeOf((*MockPersonalizeClientV2)(nil).PutEvents), varargs...)
}

// PutItems mocks base method.
func (m *MockPersonalizeClientV2) PutItems(ctx context.Context, input *personalizeevents.PutItemsInput, opts ...func(*personalizeevents.Options)) (*personalizeevents.PutItemsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, input}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutItems", varargs...)
	ret0, _ := ret[0].(*personalizeevents.PutItemsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutItems indicates an expected call of PutItems.
func (mr *MockPersonalizeClientV2MockRecorder) PutItems(ctx, input any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, input}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutItems", reflect.TypeOf((*MockPersonalizeClientV2)(nil).PutItems), varargs...)
}

// PutUsers mocks base method.
func (m *MockPersonalizeClientV2) PutUsers(ctx context.Context, input *personalizeevents.PutUsersInput, opts ...func(*personalizeevents.Options)) (*personalizeevents.PutUsersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, input}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutUsers", varargs...)
	ret0, _ := ret[0].(*personalizeevents.PutUsersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutUsers indicates an expected call of PutUsers.
func (mr *MockPersonalizeClientV2MockRecorder) PutUsers(ctx, input any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, input}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutUsers", reflect.TypeOf((*MockPersonalizeClientV2)(nil).PutUsers), varargs...)
}
