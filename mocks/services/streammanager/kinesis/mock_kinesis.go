// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rudderlabs/rudder-server/services/streammanager/kinesis (interfaces: KinesisClient)
//
// Generated by this command:
//
//	mockgen -destination=../../../mocks/services/streammanager/kinesis/mock_kinesis.go -package mock_kinesis github.com/rudderlabs/rudder-server/services/streammanager/kinesis KinesisClient
//

// Package mock_kinesis is a generated GoMock package.
package mock_kinesis

import (
	context "context"
	reflect "reflect"

	kinesis "github.com/aws/aws-sdk-go-v2/service/kinesis"
	gomock "go.uber.org/mock/gomock"
)

// MockKinesisClient is a mock of KinesisClient interface.
type MockKinesisClient struct {
	ctrl     *gomock.Controller
	recorder *MockKinesisClientMockRecorder
	isgomock struct{}
}

// MockKinesisClientMockRecorder is the mock recorder for MockKinesisClient.
type MockKinesisClientMockRecorder struct {
	mock *MockKinesisClient
}

// NewMockKinesisClient creates a new mock instance.
func NewMockKinesisClient(ctrl *gomock.Controller) *MockKinesisClient {
	mock := &MockKinesisClient{ctrl: ctrl}
	mock.recorder = &MockKinesisClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKinesisClient) EXPECT() *MockKinesisClientMockRecorder {
	return m.recorder
}

// PutRecord mocks base method.
func (m *MockKinesisClient) PutRecord(ctx context.Context, input *kinesis.PutRecordInput, opts ...func(*kinesis.Options)) (*kinesis.PutRecordOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, input}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutRecord", varargs...)
	ret0, _ := ret[0].(*kinesis.PutRecordOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutRecord indicates an expected call of PutRecord.
func (mr *MockKinesisClientMockRecorder) PutRecord(ctx, input any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, input}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutRecord", reflect.TypeOf((*MockKinesisClient)(nil).PutRecord), varargs...)
}
