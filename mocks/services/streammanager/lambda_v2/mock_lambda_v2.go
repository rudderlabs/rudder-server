// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rudderlabs/rudder-server/services/streammanager/lambda (interfaces: LambdaClientV2)
//
// Generated by this command:
//
//	mockgen --build_flags=--mod=mod -destination=../../../mocks/services/streammanager/lambda_v2/mock_lambda_v2.go -package mock_lambda_v2 github.com/rudderlabs/rudder-server/services/streammanager/lambda LambdaClientV2
//

// Package mock_lambda_v2 is a generated GoMock package.
package mock_lambda_v2

import (
	context "context"
	reflect "reflect"

	lambda "github.com/aws/aws-sdk-go-v2/service/lambda"
	gomock "go.uber.org/mock/gomock"
)

// MockLambdaClientV2 is a mock of LambdaClientV2 interface.
type MockLambdaClientV2 struct {
	ctrl     *gomock.Controller
	recorder *MockLambdaClientV2MockRecorder
	isgomock struct{}
}

// MockLambdaClientV2MockRecorder is the mock recorder for MockLambdaClientV2.
type MockLambdaClientV2MockRecorder struct {
	mock *MockLambdaClientV2
}

// NewMockLambdaClientV2 creates a new mock instance.
func NewMockLambdaClientV2(ctrl *gomock.Controller) *MockLambdaClientV2 {
	mock := &MockLambdaClientV2{ctrl: ctrl}
	mock.recorder = &MockLambdaClientV2MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLambdaClientV2) EXPECT() *MockLambdaClientV2MockRecorder {
	return m.recorder
}

// Invoke mocks base method.
func (m *MockLambdaClientV2) Invoke(ctx context.Context, input *lambda.InvokeInput, opts ...func(*lambda.Options)) (*lambda.InvokeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, input}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Invoke", varargs...)
	ret0, _ := ret[0].(*lambda.InvokeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Invoke indicates an expected call of Invoke.
func (mr *MockLambdaClientV2MockRecorder) Invoke(ctx, input any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, input}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Invoke", reflect.TypeOf((*MockLambdaClientV2)(nil).Invoke), varargs...)
}
