// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rudderlabs/rudder-server/services/streammanager/bqstream (interfaces: BQClient)
//
// Generated by this command:
//
//	mockgen -destination=../../../mocks/services/streammanager/bqstream/mock_bqstream.go -package mock_bqstream github.com/rudderlabs/rudder-server/services/streammanager/bqstream BQClient
//

// Package mock_bqstream is a generated GoMock package.
package mock_bqstream

import (
	context "context"
	reflect "reflect"

	bqstream "github.com/rudderlabs/rudder-server/services/streammanager/bqstream"
	gomock "go.uber.org/mock/gomock"
)

// MockBQClient is a mock of BQClient interface.
type MockBQClient struct {
	ctrl     *gomock.Controller
	recorder *MockBQClientMockRecorder
	isgomock struct{}
}

// MockBQClientMockRecorder is the mock recorder for MockBQClient.
type MockBQClientMockRecorder struct {
	mock *MockBQClient
}

// NewMockBQClient creates a new mock instance.
func NewMockBQClient(ctrl *gomock.Controller) *MockBQClient {
	mock := &MockBQClient{ctrl: ctrl}
	mock.recorder = &MockBQClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBQClient) EXPECT() *MockBQClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockBQClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockBQClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockBQClient)(nil).Close))
}

// Put mocks base method.
func (m *MockBQClient) Put(ctx context.Context, datasetID, tableID string, records []*bqstream.GenericRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", ctx, datasetID, tableID, records)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockBQClientMockRecorder) Put(ctx, datasetID, tableID, records any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockBQClient)(nil).Put), ctx, datasetID, tableID, records)
}
