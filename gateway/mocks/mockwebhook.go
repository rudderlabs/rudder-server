// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rudderlabs/rudder-server/gateway/webhook (interfaces: GatewayI)

// Package mockwebhook is a generated GoMock package.
package mockwebhook

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	stats "github.com/rudderlabs/rudder-server/gateway/internal/stats"
)

// MockGatewayI is a mock of GatewayI interface.
type MockGatewayI struct {
	ctrl     *gomock.Controller
	recorder *MockGatewayIMockRecorder
}

// MockGatewayIMockRecorder is the mock recorder for MockGatewayI.
type MockGatewayIMockRecorder struct {
	mock *MockGatewayI
}

// NewMockGatewayI creates a new mock instance.
func NewMockGatewayI(ctrl *gomock.Controller) *MockGatewayI {
	mock := &MockGatewayI{ctrl: ctrl}
	mock.recorder = &MockGatewayIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGatewayI) EXPECT() *MockGatewayIMockRecorder {
	return m.recorder
}

// GetWebhookSourceDefName mocks base method.
func (m *MockGatewayI) GetWebhookSourceDefName(arg0 string) (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebhookSourceDefName", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetWebhookSourceDefName indicates an expected call of GetWebhookSourceDefName.
func (mr *MockGatewayIMockRecorder) GetWebhookSourceDefName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebhookSourceDefName", reflect.TypeOf((*MockGatewayI)(nil).GetWebhookSourceDefName), arg0)
}

// IncrementAckCount mocks base method.
func (m *MockGatewayI) IncrementAckCount(arg0 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncrementAckCount", arg0)
}

// IncrementAckCount indicates an expected call of IncrementAckCount.
func (mr *MockGatewayIMockRecorder) IncrementAckCount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementAckCount", reflect.TypeOf((*MockGatewayI)(nil).IncrementAckCount), arg0)
}

// IncrementRecvCount mocks base method.
func (m *MockGatewayI) IncrementRecvCount(arg0 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncrementRecvCount", arg0)
}

// IncrementRecvCount indicates an expected call of IncrementRecvCount.
func (mr *MockGatewayIMockRecorder) IncrementRecvCount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementRecvCount", reflect.TypeOf((*MockGatewayI)(nil).IncrementRecvCount), arg0)
}

// NewSourceStat mocks base method.
func (m *MockGatewayI) NewSourceStat(arg0, arg1 string) *stats.SourceStat {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewSourceStat", arg0, arg1)
	ret0, _ := ret[0].(*stats.SourceStat)
	return ret0
}

// NewSourceStat indicates an expected call of NewSourceStat.
func (mr *MockGatewayIMockRecorder) NewSourceStat(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewSourceStat", reflect.TypeOf((*MockGatewayI)(nil).NewSourceStat), arg0, arg1)
}

// ProcessWebRequest mocks base method.
func (m *MockGatewayI) ProcessWebRequest(arg0 *http.ResponseWriter, arg1 *http.Request, arg2 string, arg3 []byte, arg4 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessWebRequest", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(string)
	return ret0
}

// ProcessWebRequest indicates an expected call of ProcessWebRequest.
func (mr *MockGatewayIMockRecorder) ProcessWebRequest(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessWebRequest", reflect.TypeOf((*MockGatewayI)(nil).ProcessWebRequest), arg0, arg1, arg2, arg3, arg4)
}

// TrackRequestMetrics mocks base method.
func (m *MockGatewayI) TrackRequestMetrics(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TrackRequestMetrics", arg0)
}

// TrackRequestMetrics indicates an expected call of TrackRequestMetrics.
func (mr *MockGatewayIMockRecorder) TrackRequestMetrics(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrackRequestMetrics", reflect.TypeOf((*MockGatewayI)(nil).TrackRequestMetrics), arg0)
}
