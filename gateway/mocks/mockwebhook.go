// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rudderlabs/rudder-server/gateway/webhook (interfaces: Gateway)
//
// Generated by this command:
//
//	mockgen --build_flags=--mod=mod -destination=./../mocks/mockwebhook.go -package mockwebhook github.com/rudderlabs/rudder-server/gateway/webhook Gateway
//

// Package mockwebhook is a generated GoMock package.
package mockwebhook

import (
	http "net/http"
	reflect "reflect"

	stats "github.com/rudderlabs/rudder-server/gateway/internal/stats"
	types "github.com/rudderlabs/rudder-server/gateway/internal/types"
	model "github.com/rudderlabs/rudder-server/gateway/webhook/model"
	gomock "go.uber.org/mock/gomock"
)

// MockGateway is a mock of Gateway interface.
type MockGateway struct {
	ctrl     *gomock.Controller
	recorder *MockGatewayMockRecorder
	isgomock struct{}
}

// MockGatewayMockRecorder is the mock recorder for MockGateway.
type MockGatewayMockRecorder struct {
	mock *MockGateway
}

// NewMockGateway creates a new mock instance.
func NewMockGateway(ctrl *gomock.Controller) *MockGateway {
	mock := &MockGateway{ctrl: ctrl}
	mock.recorder = &MockGatewayMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGateway) EXPECT() *MockGatewayMockRecorder {
	return m.recorder
}

// NewSourceStat mocks base method.
func (m *MockGateway) NewSourceStat(arctx *types.AuthRequestContext, reqType string) *stats.SourceStat {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewSourceStat", arctx, reqType)
	ret0, _ := ret[0].(*stats.SourceStat)
	return ret0
}

// NewSourceStat indicates an expected call of NewSourceStat.
func (mr *MockGatewayMockRecorder) NewSourceStat(arctx, reqType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewSourceStat", reflect.TypeOf((*MockGateway)(nil).NewSourceStat), arctx, reqType)
}

// ProcessWebRequest mocks base method.
func (m *MockGateway) ProcessWebRequest(writer *http.ResponseWriter, req *http.Request, reqType string, requestPayload []byte, arctx *types.AuthRequestContext) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessWebRequest", writer, req, reqType, requestPayload, arctx)
	ret0, _ := ret[0].(string)
	return ret0
}

// ProcessWebRequest indicates an expected call of ProcessWebRequest.
func (mr *MockGatewayMockRecorder) ProcessWebRequest(writer, req, reqType, requestPayload, arctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessWebRequest", reflect.TypeOf((*MockGateway)(nil).ProcessWebRequest), writer, req, reqType, requestPayload, arctx)
}

// SaveWebhookFailures mocks base method.
func (m *MockGateway) SaveWebhookFailures(arg0 []*model.FailedWebhookPayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveWebhookFailures", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveWebhookFailures indicates an expected call of SaveWebhookFailures.
func (mr *MockGatewayMockRecorder) SaveWebhookFailures(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveWebhookFailures", reflect.TypeOf((*MockGateway)(nil).SaveWebhookFailures), arg0)
}

// TrackRequestMetrics mocks base method.
func (m *MockGateway) TrackRequestMetrics(errorMessage string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TrackRequestMetrics", errorMessage)
}

// TrackRequestMetrics indicates an expected call of TrackRequestMetrics.
func (mr *MockGatewayMockRecorder) TrackRequestMetrics(errorMessage any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrackRequestMetrics", reflect.TypeOf((*MockGateway)(nil).TrackRequestMetrics), errorMessage)
}
