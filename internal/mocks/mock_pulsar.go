// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rudderlabs/rudder-server/internal/pulsar (interfaces: ProducerAdapter)

// Package mock_pulsar is a generated GoMock package.
package mock_pulsar

import (
	context "context"
	reflect "reflect"

	pulsar "github.com/apache/pulsar-client-go/pulsar"
	gomock "github.com/golang/mock/gomock"
)

// MockProducerAdapter is a mock of ProducerAdapter interface.
type MockProducerAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockProducerAdapterMockRecorder
}

// MockProducerAdapterMockRecorder is the mock recorder for MockProducerAdapter.
type MockProducerAdapterMockRecorder struct {
	mock *MockProducerAdapter
}

// NewMockProducerAdapter creates a new mock instance.
func NewMockProducerAdapter(ctrl *gomock.Controller) *MockProducerAdapter {
	mock := &MockProducerAdapter{ctrl: ctrl}
	mock.recorder = &MockProducerAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProducerAdapter) EXPECT() *MockProducerAdapterMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockProducerAdapter) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockProducerAdapterMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockProducerAdapter)(nil).Close))
}

// Flush mocks base method.
func (m *MockProducerAdapter) Flush() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Flush")
	ret0, _ := ret[0].(error)
	return ret0
}

// Flush indicates an expected call of Flush.
func (mr *MockProducerAdapterMockRecorder) Flush() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockProducerAdapter)(nil).Flush))
}

// SendMessage mocks base method.
func (m *MockProducerAdapter) SendMessage(arg0 context.Context, arg1, arg2 string, arg3 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockProducerAdapterMockRecorder) SendMessage(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockProducerAdapter)(nil).SendMessage), arg0, arg1, arg2, arg3)
}

// SendMessageAsync mocks base method.
func (m *MockProducerAdapter) SendMessageAsync(arg0 context.Context, arg1 []byte, arg2 func(pulsar.MessageID, *pulsar.ProducerMessage, error)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendMessageAsync", arg0, arg1, arg2)
}

// SendMessageAsync indicates an expected call of SendMessageAsync.
func (mr *MockProducerAdapterMockRecorder) SendMessageAsync(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessageAsync", reflect.TypeOf((*MockProducerAdapter)(nil).SendMessageAsync), arg0, arg1, arg2)
}
