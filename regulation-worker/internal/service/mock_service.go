// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=mock_service.go -package=service github.com/rudderlabs/rudder-server/regulation-worker/internal/service
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	model "github.com/rudderlabs/rudder-server/regulation-worker/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockAPIClient is a mock of APIClient interface.
type MockAPIClient struct {
	ctrl     *gomock.Controller
	recorder *MockAPIClientMockRecorder
	isgomock struct{}
}

// MockAPIClientMockRecorder is the mock recorder for MockAPIClient.
type MockAPIClientMockRecorder struct {
	mock *MockAPIClient
}

// NewMockAPIClient creates a new mock instance.
func NewMockAPIClient(ctrl *gomock.Controller) *MockAPIClient {
	mock := &MockAPIClient{ctrl: ctrl}
	mock.recorder = &MockAPIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPIClient) EXPECT() *MockAPIClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockAPIClient) Get(ctx context.Context) (model.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx)
	ret0, _ := ret[0].(model.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockAPIClientMockRecorder) Get(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAPIClient)(nil).Get), ctx)
}

// UpdateStatus mocks base method.
func (m *MockAPIClient) UpdateStatus(ctx context.Context, status model.JobStatus, jobID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, status, jobID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockAPIClientMockRecorder) UpdateStatus(ctx, status, jobID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockAPIClient)(nil).UpdateStatus), ctx, status, jobID)
}

// MockdestDetail is a mock of destDetail interface.
type MockdestDetail struct {
	ctrl     *gomock.Controller
	recorder *MockdestDetailMockRecorder
	isgomock struct{}
}

// MockdestDetailMockRecorder is the mock recorder for MockdestDetail.
type MockdestDetailMockRecorder struct {
	mock *MockdestDetail
}

// NewMockdestDetail creates a new mock instance.
func NewMockdestDetail(ctrl *gomock.Controller) *MockdestDetail {
	mock := &MockdestDetail{ctrl: ctrl}
	mock.recorder = &MockdestDetailMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockdestDetail) EXPECT() *MockdestDetailMockRecorder {
	return m.recorder
}

// GetDestDetails mocks base method.
func (m *MockdestDetail) GetDestDetails(destID string) (model.Destination, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDestDetails", destID)
	ret0, _ := ret[0].(model.Destination)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDestDetails indicates an expected call of GetDestDetails.
func (mr *MockdestDetailMockRecorder) GetDestDetails(destID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDestDetails", reflect.TypeOf((*MockdestDetail)(nil).GetDestDetails), destID)
}

// Mockdeleter is a mock of deleter interface.
type Mockdeleter struct {
	ctrl     *gomock.Controller
	recorder *MockdeleterMockRecorder
	isgomock struct{}
}

// MockdeleterMockRecorder is the mock recorder for Mockdeleter.
type MockdeleterMockRecorder struct {
	mock *Mockdeleter
}

// NewMockdeleter creates a new mock instance.
func NewMockdeleter(ctrl *gomock.Controller) *Mockdeleter {
	mock := &Mockdeleter{ctrl: ctrl}
	mock.recorder = &MockdeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockdeleter) EXPECT() *MockdeleterMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *Mockdeleter) Delete(ctx context.Context, job model.Job, destDetail model.Destination) model.JobStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, job, destDetail)
	ret0, _ := ret[0].(model.JobStatus)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockdeleterMockRecorder) Delete(ctx, job, destDetail any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*Mockdeleter)(nil).Delete), ctx, job, destDetail)
}
