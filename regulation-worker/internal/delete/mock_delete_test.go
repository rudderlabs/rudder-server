// Code generated by MockGen. DO NOT EDIT.
// Source: delete.go

// Package delete is a generated GoMock package.
package delete

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/rudderlabs/rudder-server/regulation-worker/internal/model"
)

// Mockdeleter is a mock of deleter interface.
type Mockdeleter struct {
	ctrl     *gomock.Controller
	recorder *MockdeleterMockRecorder
}

// MockdeleterMockRecorder is the mock recorder for Mockdeleter.
type MockdeleterMockRecorder struct {
	mock *Mockdeleter
}

// NewMockdeleter creates a new mock instance.
func NewMockdeleter(ctrl *gomock.Controller) *Mockdeleter {
	mock := &Mockdeleter{ctrl: ctrl}
	mock.recorder = &MockdeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockdeleter) EXPECT() *MockdeleterMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *Mockdeleter) Delete(ctx context.Context, job model.Job, destConfig map[string]interface{}, destName string) model.JobStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, job, destConfig, destName)
	ret0, _ := ret[0].(model.JobStatus)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockdeleterMockRecorder) Delete(ctx, job, destConfig, destName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*Mockdeleter)(nil).Delete), ctx, job, destConfig, destName)
}
