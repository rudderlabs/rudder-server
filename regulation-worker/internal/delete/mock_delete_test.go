// Code generated by MockGen. DO NOT EDIT.
// Source: delete.go

// Package delete is a generated GoMock package.
package delete

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/rudderlabs/rudder-server/regulation-worker/internal/model"
)

// MockdeleteManager is a mock of deleteManager interface.
type MockdeleteManager struct {
	ctrl     *gomock.Controller
	recorder *MockdeleteManagerMockRecorder
}

// MockdeleteManagerMockRecorder is the mock recorder for MockdeleteManager.
type MockdeleteManagerMockRecorder struct {
	mock *MockdeleteManager
}

// NewMockdeleteManager creates a new mock instance.
func NewMockdeleteManager(ctrl *gomock.Controller) *MockdeleteManager {
	mock := &MockdeleteManager{ctrl: ctrl}
	mock.recorder = &MockdeleteManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockdeleteManager) EXPECT() *MockdeleteManagerMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockdeleteManager) Delete(ctx context.Context, job model.Job, destDetail model.Destination) model.JobStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, job, destDetail)
	ret0, _ := ret[0].(model.JobStatus)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockdeleteManagerMockRecorder) Delete(ctx, job, destDetail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockdeleteManager)(nil).Delete), ctx, job, destDetail)
}

// GetSupportedDestinations mocks base method.
func (m *MockdeleteManager) GetSupportedDestinations() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSupportedDestinations")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetSupportedDestinations indicates an expected call of GetSupportedDestinations.
func (mr *MockdeleteManagerMockRecorder) GetSupportedDestinations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupportedDestinations", reflect.TypeOf((*MockdeleteManager)(nil).GetSupportedDestinations))
}
