// Code generated by MockGen. DO NOT EDIT.
// Source: destination.go

// Package destination is a generated GoMock package.
package destination

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	backendconfig "github.com/rudderlabs/rudder-server/config/backend-config"
)

// MockdestinationMiddleware is a mock of destinationMiddleware interface.
type MockdestinationMiddleware struct {
	ctrl     *gomock.Controller
	recorder *MockdestinationMiddlewareMockRecorder
}

// MockdestinationMiddlewareMockRecorder is the mock recorder for MockdestinationMiddleware.
type MockdestinationMiddlewareMockRecorder struct {
	mock *MockdestinationMiddleware
}

// NewMockdestinationMiddleware creates a new mock instance.
func NewMockdestinationMiddleware(ctrl *gomock.Controller) *MockdestinationMiddleware {
	mock := &MockdestinationMiddleware{ctrl: ctrl}
	mock.recorder = &MockdestinationMiddlewareMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockdestinationMiddleware) EXPECT() *MockdestinationMiddlewareMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockdestinationMiddleware) Get() (backendconfig.ConfigT, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].(backendconfig.ConfigT)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockdestinationMiddlewareMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockdestinationMiddleware)(nil).Get))
}

// MockdestType is a mock of destType interface.
type MockdestType struct {
	ctrl     *gomock.Controller
	recorder *MockdestTypeMockRecorder
}

// MockdestTypeMockRecorder is the mock recorder for MockdestType.
type MockdestTypeMockRecorder struct {
	mock *MockdestType
}

// NewMockdestType creates a new mock instance.
func NewMockdestType(ctrl *gomock.Controller) *MockdestType {
	mock := &MockdestType{ctrl: ctrl}
	mock.recorder = &MockdestTypeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockdestType) EXPECT() *MockdestTypeMockRecorder {
	return m.recorder
}

// DestType mocks base method.
func (m *MockdestType) DestType(batchdest []string, destName string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DestType", batchdest, destName)
	ret0, _ := ret[0].(string)
	return ret0
}

// DestType indicates an expected call of DestType.
func (mr *MockdestTypeMockRecorder) DestType(batchdest, destName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestType", reflect.TypeOf((*MockdestType)(nil).DestType), batchdest, destName)
}

// LoadBatchList mocks base method.
func (m *MockdestType) LoadBatchList() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadBatchList")
	ret0, _ := ret[0].([]string)
	return ret0
}

// LoadBatchList indicates an expected call of LoadBatchList.
func (mr *MockdestTypeMockRecorder) LoadBatchList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadBatchList", reflect.TypeOf((*MockdestType)(nil).LoadBatchList))
}
