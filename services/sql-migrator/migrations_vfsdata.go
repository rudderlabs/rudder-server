// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package migrator

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// MigrationAssets contains SQL migration scripts and templates
var MigrationAssets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2020, 6, 15, 15, 13, 24, 471682911, time.UTC),
		},
		"/jobsdb": &vfsgen۰DirInfo{
			name:    "jobsdb",
			modTime: time.Date(2020, 6, 15, 15, 14, 9, 820504215, time.UTC),
		},
		"/jobsdb/000001_create_tables.down.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "000001_create_tables.down.tmpl",
			modTime:          time.Date(2020, 6, 15, 14, 34, 6, 127927453, time.UTC),
			uncompressedSize: 265,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8e\xb1\x8a\x83\x40\x10\x86\xfb\x7d\x8a\xbf\xb8\x56\x5f\xc0\xea\x0e\x3d\x10\x0e\x4e\xa2\x45\x52\x2d\x2b\x6e\x44\x91\x55\x76\x47\x50\x86\x79\xf7\x10\x13\x93\x90\x26\xe5\xcc\x7c\xff\xfc\x5f\x14\x21\xf5\xe3\x04\xe3\x56\xd8\xa5\x0b\xd4\xb9\x16\x8d\x21\x13\x2c\x05\xc5\xec\x8d\x6b\x2d\xe2\xf4\xbe\x11\x51\x00\x90\x1e\xfe\x0b\x54\xdf\x3f\x7f\x19\x98\xbf\xe2\xc2\xdb\x73\xb7\x88\xe8\x7e\xac\x83\x66\x8e\x45\x92\x4f\x9c\x0e\x64\x68\x7e\xd0\xcc\xd6\x35\x22\x4a\xed\x42\xb4\x4e\x16\x3b\x67\xf5\x75\x54\xb7\x77\xa7\x22\x7b\x3b\x24\xcf\x58\x3f\xce\xde\x99\x01\x64\xea\x61\x0f\x6c\xfd\xf9\x2f\xb2\x63\x5e\x56\x25\x98\x5f\x45\x36\x3c\x51\xea\x12\x00\x00\xff\xff\xa5\xa4\xe3\xe3\x09\x01\x00\x00"),
		},
		"/jobsdb/000001_create_tables.up.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "000001_create_tables.up.tmpl",
			modTime:          time.Date(2020, 6, 15, 14, 34, 6, 128351942, time.UTC),
			uncompressedSize: 1358,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x51\x6f\xe2\x38\x10\x7e\xe7\x57\xcc\x03\x12\xad\x04\x9c\x74\xf7\x76\x7d\x0a\xe0\xdb\x4d\x0f\x02\x82\x74\xaf\x7d\x8a\x26\xf6\x00\xee\x1a\x3b\x67\x3b\x2d\x51\x94\xff\x7e\x72\x48\xba\x57\xb6\x2b\x35\x8f\x33\xdf\xf7\xcd\xcc\x97\x19\x4f\x26\x10\x6b\xe9\x25\x2a\x78\x21\xeb\xa4\xd1\x60\xf6\x70\x6f\x72\xb7\x98\x81\xc7\x5c\x91\x1b\x43\x8e\x8e\x04\x18\x0d\x9e\x4e\x85\x42\x4f\x20\xd0\x23\x14\xd6\xbc\x48\x41\x02\xf2\x0a\x08\xf9\xb1\xa7\x49\xed\x3c\x6a\x4e\x83\xc9\x04\xe6\x47\xe2\xdf\xe1\xd9\xe4\x4e\xe4\xbf\x39\xf2\x65\x31\x3d\x18\xd8\x1b\x0b\xa8\x14\xe0\x0b\x4a\x15\x8a\xbc\x57\x9e\x0e\x02\xf5\xde\x94\x56\xa3\x72\x97\x36\x06\xf3\x2d\x8b\x52\x06\x69\x34\x5b\x32\x88\xff\x82\x64\x9d\x02\x7b\x8c\x77\xe9\x0e\xea\x7a\xba\xb1\xb4\x97\xe7\xa6\xc9\x9e\x2f\x2c\xb8\x19\x00\x00\x48\x01\xb3\xf8\xcb\x8e\x6d\xe3\x68\x09\x9b\x6d\xbc\x8a\xb6\x4f\xf0\x37\x7b\x1a\xb7\x59\x53\x90\x45\x1f\x66\xfe\x16\x6d\xe7\x5f\xa3\xed\xcd\x1f\xbf\xdf\xb6\xc2\xc9\xc3\x72\x79\xc1\x08\xa3\x09\x66\xeb\xf5\x92\x45\xc9\x15\x2b\x2b\xb0\x52\x06\x05\xdc\xef\xd6\xc9\xec\x8a\xe7\x3c\x5a\x9f\x79\x79\x22\x48\xe3\x15\xdb\xa5\xd1\x6a\x73\x05\x21\x2d\xae\x00\xb7\x77\xdd\xe4\x79\xe0\x7b\x02\x5f\x15\x34\x86\xd2\x5d\x4c\x0e\x36\x76\x3f\x65\xb0\x58\xc3\x70\x08\x33\xf6\x25\x4e\x5a\xb1\xde\x9e\xa7\x0d\x0b\xb8\xac\xe5\x67\x81\xdf\xa6\xc3\x17\xed\x80\x25\x0f\xab\x9b\xb7\x40\xff\x8d\x5e\x51\x7a\xa9\x0f\xa3\xf1\xcf\x29\x3a\x13\x2f\x7f\x95\x74\x25\xe7\x44\x82\xc4\x47\xc9\x4e\x34\xb3\xe4\x6d\xf5\x11\x60\x8f\x52\x7d\x4c\xc5\xdc\x58\x4f\x62\x74\x7b\xd7\xe6\xd8\xe3\x9c\x6d\xd2\x78\x9d\xbc\x21\xff\xf9\xca\x12\x10\x65\xa1\x24\x0f\x63\x9a\xfc\x99\xb8\x87\x34\x44\x75\xa9\xd4\xdd\x80\x25\x0b\x18\x0e\x2f\x76\x2e\xd0\xa3\x23\xdf\x39\x07\x68\x09\xb4\xf1\xc0\x2d\xa1\x27\x01\x42\x5a\xe2\x5e\x55\xc1\xe1\x93\x3c\x74\x1b\xe1\xb8\x95\x85\x77\x63\xf0\x47\x6a\x29\x3d\xfc\x45\x62\xb7\xe8\x23\xd7\x05\x17\x3b\xd8\x97\x9a\xb7\xbc\xb0\xfc\x84\x62\x1a\x0a\xa7\x47\x82\x7f\x4b\xb2\xd5\xe5\x0f\x4a\xfd\x03\x7f\x2a\x9d\x07\x54\xaf\x58\xf5\x22\x6d\x21\xf1\xbe\xd5\xd2\x49\x7d\x68\x13\xe1\x36\x9c\x07\xc7\x8f\x74\xc2\xfe\x54\xdb\x22\xdf\xba\xb3\x2d\x0b\x11\x30\xed\x6d\xd1\x59\xba\xe0\xfd\xb5\x1e\x47\x0d\x39\x81\xa0\xbd\xd4\x24\xc6\xbd\xfe\xbb\xab\xfe\x4e\x15\x8c\x3a\xcb\xdc\x08\xbc\x01\xe9\xc3\xc2\xd3\xcf\xaa\x52\x0b\xc9\xc9\x75\xb3\x4a\x07\xd2\x01\x6a\xa0\x33\x9e\x0a\x45\xe1\x21\xc1\x37\xec\xb5\xb3\x7d\xf1\x1f\xf1\xbe\x0d\xf7\xe7\x60\x32\x09\x92\x75\x6d\x51\x1f\x08\xa6\x7d\x37\x4d\x13\xc2\xed\x2a\x2f\x53\xb6\xed\xde\x82\xba\x1e\xfe\xff\xfc\x73\x97\xd5\xf5\xb4\x69\x20\x5a\x2c\x60\xbe\x5e\x3e\xac\x12\xd0\xf4\x9a\x71\xa3\xca\x93\x86\x94\x3d\xa6\x77\x9f\x91\x69\x2f\xa8\xfc\xa4\x58\x5d\x93\x16\x4d\xf3\x5f\x00\x00\x00\xff\xff\x7d\x20\xde\x2b\x4e\x05\x00\x00"),
		},
		"/jobsdb/000002_alter_dataset_tables.down.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "000002_alter_dataset_tables.down.tmpl",
			modTime:          time.Date(2020, 6, 15, 14, 54, 37, 86829013, time.UTC),
			uncompressedSize: 726,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x91\xcf\x6a\xc2\x40\x10\xc6\xef\x3e\xc5\x1c\x02\xb6\x50\x7d\x01\x4f\xd1\x6c\x5b\x21\x6e\x82\xdd\xd0\xf6\xb4\x6c\xb2\xa3\xac\x84\x44\xf6\x0f\x55\x96\x7d\xf7\x92\x68\x05\x4b\x94\xd2\x39\x04\x32\xf3\x9b\x6f\x96\xef\xf3\x5e\x8b\x66\x8b\x30\x4d\x84\x15\x06\xad\x09\x61\x04\x00\x10\xa7\x8c\xac\x81\xc5\xf3\x94\x80\xf7\xd1\x34\xd7\xb8\x51\x87\x10\xf8\xae\x2d\x0d\xf7\x7e\x1a\x02\x24\xeb\x2c\x87\x45\x96\x16\x2b\x0a\xce\xa0\xe6\x4a\xce\xfe\xbc\x7c\x62\xce\xdb\x95\x46\x61\x51\x72\x61\xc1\xa0\x85\x84\x3c\xc7\x45\xca\x80\x16\x69\xfa\x4f\x45\x3c\xec\x95\xc6\x61\xc1\x5e\x71\x32\x01\x8d\xa7\xbb\xb0\x6b\x4b\x6e\xac\xb0\xc8\xed\x71\x8f\xd0\x7d\x7a\x26\xc9\x20\x8a\x60\x4e\x5e\x96\xb4\xff\xef\x6a\xb1\x26\x31\x23\xc0\x3e\x73\xf2\x6b\xef\x82\xf4\x0f\x7e\x03\x42\x8b\xd5\xc3\x55\xf3\xa7\xc6\x5f\x42\x59\xd5\x6c\xc7\x4f\xc3\x63\x3c\x60\xe5\xee\x01\xc6\x55\x15\xa2\x44\x79\x0b\x38\x1f\xe0\x1a\xad\x3e\xde\x82\x36\x42\xd5\xb7\x25\x44\xd9\x6a\x8b\x72\xfc\x38\xbb\x9a\x93\x8f\x05\xc9\xd9\x32\xa3\x57\xdd\xf7\x57\x42\x41\xba\x7d\xad\xaa\xce\x8e\xb6\xdc\x61\x65\x81\x75\xdd\xc6\xd5\xf5\x49\x82\xd0\x04\xa2\xe8\xec\xff\xbd\x44\x7b\x53\xdd\x60\xae\x17\xcb\x87\x12\x98\x8d\xbc\xc7\x46\x86\xf0\x1d\x00\x00\xff\xff\x80\x37\xf2\xbd\xd6\x02\x00\x00"),
		},
		"/jobsdb/000002_alter_dataset_tables.up.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "000002_alter_dataset_tables.up.tmpl",
			modTime:          time.Date(2020, 6, 15, 14, 34, 6, 129930715, time.UTC),
			uncompressedSize: 639,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x91\xc1\x6b\x9c\x40\x18\xc5\xef\xfe\x15\xef\x20\x24\x81\xac\xd0\x42\x4e\x9e\x8c\x4e\xba\x82\x19\xc5\x9d\x6d\xb6\x27\x19\xd7\xaf\xd1\x20\x2a\x33\x63\x9a\x30\xcc\xff\x5e\x74\xdb\x5d\x0a\x85\x42\x73\x9b\xef\x9b\x37\xbf\xf7\x1e\x63\xad\x92\xc3\x33\x21\x48\xa4\x91\x9a\x8c\x76\xce\x03\x80\x28\x13\xac\x84\x88\xee\x33\x06\x6b\xfd\xa0\x50\xf4\xbd\x7b\x73\xae\x7a\x19\x6b\x5d\x59\x1b\x38\xf7\x4b\x13\xe7\xd9\xfe\x91\xe3\xa8\x48\x1a\x6a\x2a\x69\xa0\xc9\x20\x61\x0f\xd1\x3e\x13\xe0\xf9\xd3\xf5\x4d\xf8\x7f\x48\x7a\x9b\x3a\x45\x1f\x25\x26\xc9\x6f\x5e\xfa\x00\x9e\x0b\xb0\x43\xba\x13\x3b\xcc\x9a\x54\xd5\x35\x10\xec\x20\xd6\x3d\xdf\x67\xd9\xd9\xe5\x6a\xf3\xe9\x2a\xf4\x56\x97\xcd\x06\xf1\x38\xbc\x92\x32\x78\x19\xeb\x4a\x1b\x69\x08\x66\xc4\xab\x54\xc7\x56\xaa\x5b\x34\x6a\x9c\x60\xde\x27\xba\xdc\x57\xcb\xf8\xcf\x8c\xab\x76\xfe\x6b\xf7\x8b\x93\xf8\x56\x30\x7c\x8d\xca\x78\x1b\x95\xd7\x9f\xef\xee\x6e\x2e\xb1\x1e\xbb\xe7\xd6\x40\x9b\xae\xef\x51\xd3\xd2\xa8\x41\xfd\x8e\xd1\xb4\xa4\x16\x82\x6e\x6a\x74\x83\x36\x72\x38\xd2\x2d\x7a\xa9\x0d\xc6\x81\x30\x4f\xcd\xf2\x55\xf8\xb1\xbc\x3b\x85\x6f\x69\x2d\x10\xac\xe4\x24\x87\xef\xe3\x9e\x7d\x49\xf9\x3a\xaf\xbb\x32\x2f\x4e\x51\xfe\xec\x18\x9e\x15\xec\x10\xb3\x42\xa4\x39\xc7\xd3\x96\x71\xe4\x62\xcb\xca\x1d\xc4\x72\x1e\xe6\xbe\x3f\x09\x19\x4f\xe0\xfb\xa1\x67\x2d\x0d\x8d\x73\xde\xcf\x00\x00\x00\xff\xff\x39\xdf\x1a\x94\x7f\x02\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/jobsdb"].(os.FileInfo),
	}
	fs["/jobsdb"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/jobsdb/000001_create_tables.down.tmpl"].(os.FileInfo),
		fs["/jobsdb/000001_create_tables.up.tmpl"].(os.FileInfo),
		fs["/jobsdb/000002_alter_dataset_tables.down.tmpl"].(os.FileInfo),
		fs["/jobsdb/000002_alter_dataset_tables.up.tmpl"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
