// Code generated by MockGen. DO NOT EDIT.
// Source: rsources.go

// Package rsources is a generated GoMock package.
package rsources

import (
	context "context"
	sql "database/sql"
	json "encoding/json"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockJobService is a mock of JobService interface.
type MockJobService struct {
	ctrl     *gomock.Controller
	recorder *MockJobServiceMockRecorder
}

// MockJobServiceMockRecorder is the mock recorder for MockJobService.
type MockJobServiceMockRecorder struct {
	mock *MockJobService
}

// NewMockJobService creates a new mock instance.
func NewMockJobService(ctrl *gomock.Controller) *MockJobService {
	mock := &MockJobService{ctrl: ctrl}
	mock.recorder = &MockJobServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobService) EXPECT() *MockJobServiceMockRecorder {
	return m.recorder
}

// AddFailedRecords mocks base method.
func (m *MockJobService) AddFailedRecords(ctx context.Context, tx *sql.Tx, jobRunId string, key JobTargetKey, records []json.RawMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFailedRecords", ctx, tx, jobRunId, key, records)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddFailedRecords indicates an expected call of AddFailedRecords.
func (mr *MockJobServiceMockRecorder) AddFailedRecords(ctx, tx, jobRunId, key, records interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFailedRecords", reflect.TypeOf((*MockJobService)(nil).AddFailedRecords), ctx, tx, jobRunId, key, records)
}

// Delete mocks base method.
func (m *MockJobService) Delete(ctx context.Context, jobRunId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, jobRunId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockJobServiceMockRecorder) Delete(ctx, jobRunId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockJobService)(nil).Delete), ctx, jobRunId)
}

// GetFailedRecords mocks base method.
func (m *MockJobService) GetFailedRecords(ctx context.Context, tx *sql.Tx, jobRunId string, filter JobFilter) (FailedRecords, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFailedRecords", ctx, tx, jobRunId, filter)
	ret0, _ := ret[0].(FailedRecords)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFailedRecords indicates an expected call of GetFailedRecords.
func (mr *MockJobServiceMockRecorder) GetFailedRecords(ctx, tx, jobRunId, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFailedRecords", reflect.TypeOf((*MockJobService)(nil).GetFailedRecords), ctx, tx, jobRunId, filter)
}

// GetStatus mocks base method.
func (m *MockJobService) GetStatus(ctx context.Context, jobRunId string, filter JobFilter) (JobStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatus", ctx, jobRunId, filter)
	ret0, _ := ret[0].(JobStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatus indicates an expected call of GetStatus.
func (mr *MockJobServiceMockRecorder) GetStatus(ctx, jobRunId, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockJobService)(nil).GetStatus), ctx, jobRunId, filter)
}

// IncrementStats mocks base method.
func (m *MockJobService) IncrementStats(ctx context.Context, tx *sql.Tx, jobRunId string, key JobTargetKey, stats Stats) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementStats", ctx, tx, jobRunId, key, stats)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrementStats indicates an expected call of IncrementStats.
func (mr *MockJobServiceMockRecorder) IncrementStats(ctx, tx, jobRunId, key, stats interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementStats", reflect.TypeOf((*MockJobService)(nil).IncrementStats), ctx, tx, jobRunId, key, stats)
}
