// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: proto/common/dpauth.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DPAuthServiceClient is the client API for DPAuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DPAuthServiceClient interface {
	GetConnectionToken(ctx context.Context, in *GetConnectionTokenRequest, opts ...grpc.CallOption) (*GetConnectionTokenResponse, error)
	GetWorkspaceToken(ctx context.Context, in *GetWorkspaceTokenRequest, opts ...grpc.CallOption) (*GetWorkspaceTokenResponse, error)
}

type dPAuthServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDPAuthServiceClient(cc grpc.ClientConnInterface) DPAuthServiceClient {
	return &dPAuthServiceClient{cc}
}

func (c *dPAuthServiceClient) GetConnectionToken(ctx context.Context, in *GetConnectionTokenRequest, opts ...grpc.CallOption) (*GetConnectionTokenResponse, error) {
	out := new(GetConnectionTokenResponse)
	err := c.cc.Invoke(ctx, "/proto.DPAuthService/GetConnectionToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPAuthServiceClient) GetWorkspaceToken(ctx context.Context, in *GetWorkspaceTokenRequest, opts ...grpc.CallOption) (*GetWorkspaceTokenResponse, error) {
	out := new(GetWorkspaceTokenResponse)
	err := c.cc.Invoke(ctx, "/proto.DPAuthService/GetWorkspaceToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DPAuthServiceServer is the server API for DPAuthService service.
// All implementations must embed UnimplementedDPAuthServiceServer
// for forward compatibility
type DPAuthServiceServer interface {
	GetConnectionToken(context.Context, *GetConnectionTokenRequest) (*GetConnectionTokenResponse, error)
	GetWorkspaceToken(context.Context, *GetWorkspaceTokenRequest) (*GetWorkspaceTokenResponse, error)
	mustEmbedUnimplementedDPAuthServiceServer()
}

// UnimplementedDPAuthServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDPAuthServiceServer struct {
}

func (UnimplementedDPAuthServiceServer) GetConnectionToken(context.Context, *GetConnectionTokenRequest) (*GetConnectionTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnectionToken not implemented")
}
func (UnimplementedDPAuthServiceServer) GetWorkspaceToken(context.Context, *GetWorkspaceTokenRequest) (*GetWorkspaceTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkspaceToken not implemented")
}
func (UnimplementedDPAuthServiceServer) mustEmbedUnimplementedDPAuthServiceServer() {}

// UnsafeDPAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DPAuthServiceServer will
// result in compilation errors.
type UnsafeDPAuthServiceServer interface {
	mustEmbedUnimplementedDPAuthServiceServer()
}

func RegisterDPAuthServiceServer(s grpc.ServiceRegistrar, srv DPAuthServiceServer) {
	s.RegisterService(&DPAuthService_ServiceDesc, srv)
}

func _DPAuthService_GetConnectionToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConnectionTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPAuthServiceServer).GetConnectionToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DPAuthService/GetConnectionToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPAuthServiceServer).GetConnectionToken(ctx, req.(*GetConnectionTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPAuthService_GetWorkspaceToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkspaceTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPAuthServiceServer).GetWorkspaceToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DPAuthService/GetWorkspaceToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPAuthServiceServer).GetWorkspaceToken(ctx, req.(*GetWorkspaceTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DPAuthService_ServiceDesc is the grpc.ServiceDesc for DPAuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DPAuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.DPAuthService",
	HandlerType: (*DPAuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConnectionToken",
			Handler:    _DPAuthService_GetConnectionToken_Handler,
		},
		{
			MethodName: "GetWorkspaceToken",
			Handler:    _DPAuthService_GetWorkspaceToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/common/dpauth.proto",
}
