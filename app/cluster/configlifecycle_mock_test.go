// Code generated by MockGen. DO NOT EDIT.
// Source: ./dynamic.go

// Package cluster_test is a generated GoMock package.
package cluster_test

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	servermode "github.com/rudderlabs/rudder-server/utils/types/servermode"
	workspace "github.com/rudderlabs/rudder-server/utils/types/workspace"
)

// MockChangeEventProvider is a mock of ChangeEventProvider interface.
type MockChangeEventProvider struct {
	ctrl     *gomock.Controller
	recorder *MockChangeEventProviderMockRecorder
}

// MockChangeEventProviderMockRecorder is the mock recorder for MockChangeEventProvider.
type MockChangeEventProviderMockRecorder struct {
	mock *MockChangeEventProvider
}

// NewMockChangeEventProvider creates a new mock instance.
func NewMockChangeEventProvider(ctrl *gomock.Controller) *MockChangeEventProvider {
	mock := &MockChangeEventProvider{ctrl: ctrl}
	mock.recorder = &MockChangeEventProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChangeEventProvider) EXPECT() *MockChangeEventProviderMockRecorder {
	return m.recorder
}

// ServerMode mocks base method.
func (m *MockChangeEventProvider) ServerMode(ctx context.Context) <-chan servermode.ChangeEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerMode", ctx)
	ret0, _ := ret[0].(<-chan servermode.ChangeEvent)
	return ret0
}

// ServerMode indicates an expected call of ServerMode.
func (mr *MockChangeEventProviderMockRecorder) ServerMode(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerMode", reflect.TypeOf((*MockChangeEventProvider)(nil).ServerMode), ctx)
}

// WorkspaceIDs mocks base method.
func (m *MockChangeEventProvider) WorkspaceIDs(ctx context.Context) <-chan workspace.ChangeEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkspaceIDs", ctx)
	ret0, _ := ret[0].(<-chan workspace.ChangeEvent)
	return ret0
}

// WorkspaceIDs indicates an expected call of WorkspaceIDs.
func (mr *MockChangeEventProviderMockRecorder) WorkspaceIDs(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkspaceIDs", reflect.TypeOf((*MockChangeEventProvider)(nil).WorkspaceIDs), ctx)
}

// Mocklifecycle is a mock of lifecycle interface.
type Mocklifecycle struct {
	ctrl     *gomock.Controller
	recorder *MocklifecycleMockRecorder
}

// MocklifecycleMockRecorder is the mock recorder for Mocklifecycle.
type MocklifecycleMockRecorder struct {
	mock *Mocklifecycle
}

// NewMocklifecycle creates a new mock instance.
func NewMocklifecycle(ctrl *gomock.Controller) *Mocklifecycle {
	mock := &Mocklifecycle{ctrl: ctrl}
	mock.recorder = &MocklifecycleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mocklifecycle) EXPECT() *MocklifecycleMockRecorder {
	return m.recorder
}

// Start mocks base method.
func (m *Mocklifecycle) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MocklifecycleMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*Mocklifecycle)(nil).Start))
}

// Stop mocks base method.
func (m *Mocklifecycle) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MocklifecycleMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*Mocklifecycle)(nil).Stop))
}

// MockconfigLifecycle is a mock of configLifecycle interface.
type MockconfigLifecycle struct {
	ctrl     *gomock.Controller
	recorder *MockconfigLifecycleMockRecorder
}

// MockconfigLifecycleMockRecorder is the mock recorder for MockconfigLifecycle.
type MockconfigLifecycleMockRecorder struct {
	mock *MockconfigLifecycle
}

// NewMockconfigLifecycle creates a new mock instance.
func NewMockconfigLifecycle(ctrl *gomock.Controller) *MockconfigLifecycle {
	mock := &MockconfigLifecycle{ctrl: ctrl}
	mock.recorder = &MockconfigLifecycleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockconfigLifecycle) EXPECT() *MockconfigLifecycleMockRecorder {
	return m.recorder
}

// StartWithIDs mocks base method.
func (m *MockconfigLifecycle) StartWithIDs(ctx context.Context, workspaces string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartWithIDs", ctx, workspaces)
}

// StartWithIDs indicates an expected call of StartWithIDs.
func (mr *MockconfigLifecycleMockRecorder) StartWithIDs(ctx, workspaces interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartWithIDs", reflect.TypeOf((*MockconfigLifecycle)(nil).StartWithIDs), ctx, workspaces)
}

// Stop mocks base method.
func (m *MockconfigLifecycle) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockconfigLifecycleMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockconfigLifecycle)(nil).Stop))
}

// WaitForConfig mocks base method.
func (m *MockconfigLifecycle) WaitForConfig(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WaitForConfig", ctx)
}

// WaitForConfig indicates an expected call of WaitForConfig.
func (mr *MockconfigLifecycleMockRecorder) WaitForConfig(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForConfig", reflect.TypeOf((*MockconfigLifecycle)(nil).WaitForConfig), ctx)
}
