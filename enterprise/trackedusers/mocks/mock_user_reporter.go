// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rudderlabs/rudder-server/enterprise/trackedusers (interfaces: UsersReporter)

// Package mockuserreporter is a generated GoMock package.
package mockuserreporter

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	config "github.com/rudderlabs/rudder-go-kit/config"
	trackedusers "github.com/rudderlabs/rudder-server/enterprise/trackedusers"
	jobsdb "github.com/rudderlabs/rudder-server/jobsdb"
	tx "github.com/rudderlabs/rudder-server/utils/tx"
)

// MockUsersReporter is a mock of UsersReporter interface.
type MockUsersReporter struct {
	ctrl     *gomock.Controller
	recorder *MockUsersReporterMockRecorder
}

// MockUsersReporterMockRecorder is the mock recorder for MockUsersReporter.
type MockUsersReporterMockRecorder struct {
	mock *MockUsersReporter
}

// NewMockUsersReporter creates a new mock instance.
func NewMockUsersReporter(ctrl *gomock.Controller) *MockUsersReporter {
	mock := &MockUsersReporter{ctrl: ctrl}
	mock.recorder = &MockUsersReporterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsersReporter) EXPECT() *MockUsersReporterMockRecorder {
	return m.recorder
}

// GenerateReportsFromJobs mocks base method.
func (m *MockUsersReporter) GenerateReportsFromJobs(arg0 []*jobsdb.JobT) []*trackedusers.UsersReport {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateReportsFromJobs", arg0)
	ret0, _ := ret[0].([]*trackedusers.UsersReport)
	return ret0
}

// GenerateReportsFromJobs indicates an expected call of GenerateReportsFromJobs.
func (mr *MockUsersReporterMockRecorder) GenerateReportsFromJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateReportsFromJobs", reflect.TypeOf((*MockUsersReporter)(nil).GenerateReportsFromJobs), arg0)
}

// MigrateDatabase mocks base method.
func (m *MockUsersReporter) MigrateDatabase(arg0 string, arg1 *config.Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MigrateDatabase", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// MigrateDatabase indicates an expected call of MigrateDatabase.
func (mr *MockUsersReporterMockRecorder) MigrateDatabase(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrateDatabase", reflect.TypeOf((*MockUsersReporter)(nil).MigrateDatabase), arg0, arg1)
}

// ReportUsers mocks base method.
func (m *MockUsersReporter) ReportUsers(arg0 context.Context, arg1 []*trackedusers.UsersReport, arg2 *tx.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReportUsers", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReportUsers indicates an expected call of ReportUsers.
func (mr *MockUsersReporterMockRecorder) ReportUsers(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportUsers", reflect.TypeOf((*MockUsersReporter)(nil).ReportUsers), arg0, arg1, arg2)
}
