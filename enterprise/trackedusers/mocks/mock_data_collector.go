// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rudderlabs/rudder-server/enterprise/trackedusers (interfaces: DataCollector)

// Package mockdatacollector is a generated GoMock package.
package mockdatacollector

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	jobsdb "github.com/rudderlabs/rudder-server/jobsdb"
	tx "github.com/rudderlabs/rudder-server/utils/tx"
)

// MockDataCollector is a mock of DataCollector interface.
type MockDataCollector struct {
	ctrl     *gomock.Controller
	recorder *MockDataCollectorMockRecorder
}

// MockDataCollectorMockRecorder is the mock recorder for MockDataCollector.
type MockDataCollectorMockRecorder struct {
	mock *MockDataCollector
}

// NewMockDataCollector creates a new mock instance.
func NewMockDataCollector(ctrl *gomock.Controller) *MockDataCollector {
	mock := &MockDataCollector{ctrl: ctrl}
	mock.recorder = &MockDataCollectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataCollector) EXPECT() *MockDataCollectorMockRecorder {
	return m.recorder
}

// CollectData mocks base method.
func (m *MockDataCollector) CollectData(arg0 context.Context, arg1 []*jobsdb.JobT, arg2 *tx.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CollectData", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CollectData indicates an expected call of CollectData.
func (mr *MockDataCollectorMockRecorder) CollectData(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectData", reflect.TypeOf((*MockDataCollector)(nil).CollectData), arg0, arg1, arg2)
}
