// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: limiter.proto

/*
	Package restrictor is a generated protocol buffer package.

	It is generated from these files:
		limiter.proto

	It has these top-level messages:
		Limiter
*/
package restrictor

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import strings "strings"
import reflect "reflect"
import sortkeys "github.com/gogo/protobuf/sortkeys"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Limiter struct {
	FullUntil uint32            `protobuf:"varint,2,opt,name=fullUntil,proto3" json:"fullUntil,omitempty"`
	Buckets   map[uint32]uint32 `protobuf:"bytes,3,rep,name=buckets" json:"buckets,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *Limiter) Reset()                    { *m = Limiter{} }
func (*Limiter) ProtoMessage()               {}
func (*Limiter) Descriptor() ([]byte, []int) { return fileDescriptorLimiter, []int{0} }

func (m *Limiter) GetFullUntil() uint32 {
	if m != nil {
		return m.FullUntil
	}
	return 0
}

func (m *Limiter) GetBuckets() map[uint32]uint32 {
	if m != nil {
		return m.Buckets
	}
	return nil
}

func init() {
	proto.RegisterType((*Limiter)(nil), "restrictor.Limiter")
}
func (this *Limiter) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Limiter)
	if !ok {
		that2, ok := that.(Limiter)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FullUntil != that1.FullUntil {
		return false
	}
	if len(this.Buckets) != len(that1.Buckets) {
		return false
	}
	for i := range this.Buckets {
		if this.Buckets[i] != that1.Buckets[i] {
			return false
		}
	}
	return true
}
func (this *Limiter) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&restrictor.Limiter{")
	s = append(s, "FullUntil: "+fmt.Sprintf("%#v", this.FullUntil)+",\n")
	keysForBuckets := make([]uint32, 0, len(this.Buckets))
	for k, _ := range this.Buckets {
		keysForBuckets = append(keysForBuckets, k)
	}
	sortkeys.Uint32s(keysForBuckets)
	mapStringForBuckets := "map[uint32]uint32{"
	for _, k := range keysForBuckets {
		mapStringForBuckets += fmt.Sprintf("%#v: %#v,", k, this.Buckets[k])
	}
	mapStringForBuckets += "}"
	if this.Buckets != nil {
		s = append(s, "Buckets: "+mapStringForBuckets+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringLimiter(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Limiter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Limiter) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FullUntil != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintLimiter(dAtA, i, uint64(m.FullUntil))
	}
	if len(m.Buckets) > 0 {
		for k, _ := range m.Buckets {
			dAtA[i] = 0x1a
			i++
			v := m.Buckets[k]
			mapSize := 1 + sovLimiter(uint64(k)) + 1 + sovLimiter(uint64(v))
			i = encodeVarintLimiter(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintLimiter(dAtA, i, uint64(k))
			dAtA[i] = 0x10
			i++
			i = encodeVarintLimiter(dAtA, i, uint64(v))
		}
	}
	return i, nil
}

func encodeVarintLimiter(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Limiter) Size() (n int) {
	var l int
	_ = l
	if m.FullUntil != 0 {
		n += 1 + sovLimiter(uint64(m.FullUntil))
	}
	if len(m.Buckets) > 0 {
		for k, v := range m.Buckets {
			_ = k
			_ = v
			mapEntrySize := 1 + sovLimiter(uint64(k)) + 1 + sovLimiter(uint64(v))
			n += mapEntrySize + 1 + sovLimiter(uint64(mapEntrySize))
		}
	}
	return n
}

func sovLimiter(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozLimiter(x uint64) (n int) {
	return sovLimiter(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Limiter) String() string {
	if this == nil {
		return "nil"
	}
	keysForBuckets := make([]uint32, 0, len(this.Buckets))
	for k, _ := range this.Buckets {
		keysForBuckets = append(keysForBuckets, k)
	}
	sortkeys.Uint32s(keysForBuckets)
	mapStringForBuckets := "map[uint32]uint32{"
	for _, k := range keysForBuckets {
		mapStringForBuckets += fmt.Sprintf("%v: %v,", k, this.Buckets[k])
	}
	mapStringForBuckets += "}"
	s := strings.Join([]string{`&Limiter{`,
		`FullUntil:` + fmt.Sprintf("%v", this.FullUntil) + `,`,
		`Buckets:` + mapStringForBuckets + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringLimiter(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Limiter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLimiter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Limiter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Limiter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FullUntil", wireType)
			}
			m.FullUntil = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLimiter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FullUntil |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buckets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLimiter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLimiter
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Buckets == nil {
				m.Buckets = make(map[uint32]uint32)
			}
			var mapkey uint32
			var mapvalue uint32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLimiter
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLimiter
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLimiter
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipLimiter(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthLimiter
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Buckets[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLimiter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLimiter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLimiter(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLimiter
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLimiter
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLimiter
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthLimiter
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowLimiter
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipLimiter(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthLimiter = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLimiter   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("limiter.proto", fileDescriptorLimiter) }

var fileDescriptorLimiter = []byte{
	// 208 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcd, 0xc9, 0xcc, 0xcd,
	0x2c, 0x49, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x2a, 0x4a, 0x2d, 0x2e, 0x29,
	0xca, 0x4c, 0x2e, 0xc9, 0x2f, 0x52, 0x9a, 0xcf, 0xc8, 0xc5, 0xee, 0x03, 0x91, 0x15, 0x92, 0xe1,
	0xe2, 0x4c, 0x2b, 0xcd, 0xc9, 0x09, 0xcd, 0x2b, 0xc9, 0xcc, 0x91, 0x60, 0x52, 0x60, 0xd4, 0xe0,
	0x0d, 0x42, 0x08, 0x08, 0x59, 0x71, 0xb1, 0x27, 0x95, 0x26, 0x67, 0xa7, 0x96, 0x14, 0x4b, 0x30,
	0x2b, 0x30, 0x6b, 0x70, 0x1b, 0x29, 0xe8, 0x21, 0xcc, 0xd1, 0x83, 0x9a, 0xa1, 0xe7, 0x04, 0x51,
	0xe2, 0x9a, 0x57, 0x52, 0x54, 0x19, 0x04, 0xd3, 0x20, 0x65, 0xc5, 0xc5, 0x83, 0x2c, 0x21, 0x24,
	0xc0, 0xc5, 0x9c, 0x9d, 0x5a, 0x29, 0xc1, 0x08, 0xb6, 0x03, 0xc4, 0x14, 0x12, 0xe1, 0x62, 0x2d,
	0x4b, 0xcc, 0x29, 0x4d, 0x85, 0xda, 0x0b, 0xe1, 0x58, 0x31, 0x59, 0x30, 0x3a, 0xe9, 0x5c, 0x78,
	0x28, 0xc7, 0x70, 0xe3, 0xa1, 0x1c, 0xc3, 0x87, 0x87, 0x72, 0x8c, 0x0d, 0x8f, 0xe4, 0x18, 0x57,
	0x3c, 0x92, 0x63, 0x3c, 0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6, 0x07, 0x8f, 0xe4, 0x18,
	0x5f, 0x3c, 0x92, 0x63, 0xf8, 0xf0, 0x48, 0x8e, 0x71, 0xc2, 0x63, 0x39, 0x86, 0x24, 0x36, 0xb0,
	0x17, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x65, 0x2c, 0xd0, 0xac, 0xf3, 0x00, 0x00, 0x00,
}
